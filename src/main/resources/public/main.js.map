{"version":3,"sources":["webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/_guards/auth.guard.ts","webpack:///./src/app/_models/AnalysisBigdata.ts","webpack:///./src/app/_models/CurrentStatus.ts","webpack:///./src/app/_models/Dashboard.ts","webpack:///./src/app/_models/KibanaInfo.ts","webpack:///./src/app/_models/Reflector.ts","webpack:///./src/app/_models/WebSocketMsg.ts","webpack:///./src/app/_models/url.ts","webpack:///./src/app/_services/AnalysisBigdata/analysis-bigdata.service.ts","webpack:///./src/app/_services/Message/message.service.ts","webpack:///./src/app/_services/auth/auth.service.ts","webpack:///./src/app/_services/config/AppConfig.ts","webpack:///./src/app/_services/config/config.service.ts","webpack:///./src/app/_services/currentStatus/current-status.service.ts","webpack:///./src/app/_services/error/error.handler.ts","webpack:///./src/app/_services/error/error.service.ts","webpack:///./src/app/_services/geocode/geocode.service.ts","webpack:///./src/app/_services/lesionHistory/lesion-history.service.ts","webpack:///./src/app/_services/qualityHistory/quality-history.service.ts","webpack:///./src/app/_services/reflector/reflector.service.ts","webpack:///./src/app/_views/analysis-bigdata/analysis-bigdata.component.html","webpack:///./src/app/_views/analysis-bigdata/analysis-bigdata.component.ts","webpack:///./src/app/_views/analysis-bigdata/analysis-bigdata.dialog.html","webpack:///./src/app/_views/config/config.component.html","webpack:///./src/app/_views/config/config.component.ts","webpack:///./src/app/_views/dashboard/dashboard.component.html","webpack:///./src/app/_views/dashboard/dashboard.component.ts","webpack:///./src/app/_views/error/error.component.html","webpack:///./src/app/_views/error/error.component.ts","webpack:///./src/app/_views/index.ts","webpack:///./src/app/_views/login/login.component.html","webpack:///./src/app/_views/login/login.component.ts","webpack:///./src/app/_views/obstacle/obstacle-history.component.html","webpack:///./src/app/_views/obstacle/obstacle-history.component.ts","webpack:///./src/app/_views/quality-history/quality-graph.dialog.html","webpack:///./src/app/_views/quality-history/quality-history.component.html","webpack:///./src/app/_views/quality-history/quality-history.component.ts","webpack:///./src/app/_views/quality-measurement/quality-measurement.component.html","webpack:///./src/app/_views/quality-measurement/quality-measurement.component.ts","webpack:///./src/app/_views/reflector-mgmt/reflector-add.dialog.html","webpack:///./src/app/_views/reflector-mgmt/reflector-mgmt.component.html","webpack:///./src/app/_views/reflector-mgmt/reflector-mgmt.component.ts","webpack:///./src/app/_views/reflector-mgmt/reflector-modify.dialog.html","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"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","file":"main.js","sourcesContent":["var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-SG\": \"./node_modules/moment/locale/en-SG.js\",\n\t\"./en-SG.js\": \"./node_modules/moment/locale/en-SG.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n    constructor(\n        private router: Router\n    ) {\n\n    }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (localStorage.getItem('currentUser')) {\n            return true;\n        } else {\n            this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n            return false;\n        }\n    }\n}\n","export class AnalysisBigdata {\n\n    public senderIp: string;\n    public reflectorIp: string;\n    public lostPacketTH: number;\n    public duplicatePacketTH: number;\n    public outoforderPacketTH: number;\n    public pdvTH: number;\n    public ipdvTH: number;\n    public startTime: any;\n    public endtime: any;\n\n    constructor() {\n        this.senderIp = '';\n        this.reflectorIp = '';\n        this.lostPacketTH = 0;\n        this.duplicatePacketTH = 0;\n        this.outoforderPacketTH = 0;\n        this.pdvTH = 0;\n        this.ipdvTH = 0;\n        this.startTime = '';\n        this.endtime = '';\n    }\n}\n","export class CurrentStatus {\n\n    constructor(\n        public sessId?: number,\n        public senderIp?: string,\n        public reflectorIp?: string,\n        public sendCount?: number,\n        public repeatCount?: number,\n        public senderPort?: number,\n        public reflectorPort?: number,\n        public protocol?: string,\n        public startTime?: string,\n        public pid?: number,\n        public timeout?: number,\n        public measureMode?: string,\n        public id?: string,\n        public password?: string\n    ) { }\n}\n","export class Protocol {\n\n    constructor(\n        public id?: number,\n        public type?: string\n    ) { }\n}\n\nexport class RepeatCount {\n\n    constructor(\n        public value?: number,\n        public type?: string\n    ) { }\n\n}","export class KibanaInfo {\n\n    constructor(\n        public kibanaId?: number,\n        public url?: string,\n        public host?: string,\n        public eport?: number,\n        public kport?: number\n    ) { }\n\n}\n\nexport class AddKibanaInfo {\n\n    constructor(\n        public host?: string,\n        public eport?: number,\n        public kport?: number\n    ) { }\n\n}\n\n","import { Protocol } from \"./Dashboard\";\n\nexport class Reflector {\n\n    constructor(\n        public reflectorId: number,\n        public reflectorIp?: string,\n        public protocol?: Protocol,\n        public port?: number,\n        public lat?: number,\n        public lng?: number,\n        public address?: string,\n        public deleteCheck?: boolean\n    ) {\n        deleteCheck = false;\n     }\n\n}\n","export class WebSocketMsg {\n\n    constructor(\n        public id?: string,\n        public message?: string,\n        public type?: string\n    ) { }\n\n}\n","export class Url {\n    // private url = 'http://192.168.80.128:8090';\n    // private url: string = 'http://10.11.1.38:8090';\n    private url = '/api';\n    public getUrl () {\n        return this.url;\n    }\n  }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Url } from '../../_models/url';\nimport { AnalysisBigdata } from '../../_models/AnalysisBigdata';\n\n@Injectable()\nexport class AnalysisBigdataService {\n    private url = new Url();\n\n    constructor(\n        private httpClient: HttpClient\n    ) { }\n\n\n    RequestAnalysisBigdata(asData: AnalysisBigdata, page: number, size: number, sort: string): Observable<Object> {\n        return this.httpClient.post(this.url.getUrl() + '/analysis', asData, {\n            params: {\n                'page' : '' + page,\n                'size' : '' + size,\n                'sort' : sort\n            }\n        });\n    }\n}","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class MessageService {\n  private subject = new Subject<any>();\n\n  sendMessage(message: string) {\n      this.subject.next(message);\n  }\n\n  getMessage(): Observable<any> {\n      return this.subject.asObservable();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class AuthenticationService {\n    logout(): void {\n        localStorage.removeItem('currentUser');\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { AppconfigModel } from './appconfig.model';\nimport { environment } from '../../../environments/environment';\n\n@Injectable()\nexport class AppConfig {\n\n    static settings: AppconfigModel;\n\n    constructor (\n        private http: Http\n    ) {\n\n    }\n\n    public load(): Promise<void> {\n        const jsonFile = `assets/config.${environment.name}.json`;\n        console.log('environment Name : ' + jsonFile);\n        return new Promise<void>((resolve, reject) => {\n            this.http.get(jsonFile).toPromise().then((response: Response) => {\n                AppConfig.settings = <AppconfigModel>response.json();\n                resolve();\n            }).catch((response: any) => {\n                reject(`Cloud not load file '${jsonFile}': ${JSON.stringify(response)}`);\n            });\n        });\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Url } from '../../_models/url';\nimport { KibanaInfo } from '../../_models/KibanaInfo';\nimport { WebSocketMsg } from '../../_models/WebSocketMsg';\n\n@Injectable()\nexport class ConfigService {\n  private url = new Url();\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  getKibanaListPageable(page: number, size: number, sort: string): Observable<Object> {\n    return this.httpClient.get(this.url.getUrl() + '/kibana', {\n      params: {\n        'page' : '' + page,\n        'size' : '' + size,\n        'sort' : sort\n      }\n    });\n  }\n\n  getKibanaListAll(): Observable<Object> {\n    return this.httpClient.get(this.url.getUrl() + '/kibana');\n  }\n\n  saveKibanaInfoAndDashboard(kibanaInfo: KibanaInfo): Observable<Object> {\n    return this.httpClient.post(this.url.getUrl() + '/kibana', kibanaInfo);\n  }\n\n  addKibanaDashboard(message: WebSocketMsg): Observable<Object> {\n    return this.httpClient.post(this.url.getUrl() + '/kibana/dashboard', message);\n  }\n\n  addKibanaVisualization(message: WebSocketMsg): Observable<Object> {\n    return this.httpClient.post(this.url.getUrl() + '/kibana/visualization', message);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Url } from '../../_models/url';\nimport { CurrentStatus } from '../../_models/CurrentStatus';\n\n@Injectable()\nexport class CurrentStatusService {\n  private url = new Url();\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  getCurrentStatusListPageable(page: number, size: number, sort: string): Observable<Object> {\n    return this.httpClient.get(this.url.getUrl() + '/current-status', {\n      params: {\n        'page' : '' + page,\n        'size' : '' + size,\n        'sort' : sort\n      }\n    });\n  }\n\n  startQualityMeasure(currentStatus: CurrentStatus): Observable<Object> {\n    return this.httpClient.post(this.url.getUrl() + '/current-status', currentStatus);\n  }\n  startMeasureStop(currentStatus: CurrentStatus): Observable<Object> {\n    return this.httpClient.post(this.url.getUrl() + '/current-status/' + currentStatus.sessId + '/stop-measure', {});\n  }\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { Location, LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { MessageService } from '../Message/message.service';\n\n@Injectable()\nexport class ErrorsHandler implements ErrorHandler {\n    NOT_FOUND_MEASURE_START = 'Not found pageable By current Status';\n    NULL_POINTER_MEASURE_START = 'Null Pointer Exception = 측정 시작 부분';\n    constructor(\n        private injector: Injector,\n        private messageService: MessageService\n    ) { }\n\n    handleError(error: Error | HttpErrorResponse) {\n        const router = this.injector.get(Router);\n\n        if (error instanceof HttpErrorResponse) {\n            // Server error happened\n            if (!navigator.onLine) {\n                // No Internet connection\n                // return notificationService.notify('No Internet Connection');\n            } else {\n                // Http Error\n                // router.navigateByUrl('/dashboard', {queryParams: { error: error} } );\n                /**\n                 * 대시보드 - 현재 품질측정 하는 목록이 없을 경우\n                 */\n                if (error['error'].result.indexOf(this.NOT_FOUND_MEASURE_START) != -1) {\n                    this.messageService.sendMessage(this.NOT_FOUND_MEASURE_START);\n                    console.log(error['error'].message + ' : 진행중인 품질 측정 없음.');\n                    return;\n                } else if (error['error'].result.indexOf(this.NULL_POINTER_MEASURE_START) != -1) {\n                    this.messageService.sendMessage(this.NULL_POINTER_MEASURE_START);\n                    console.error(error['error'].message);\n                    return;\n                } else {\n                    this.messageService.sendMessage(error['error'].message);\n                    console.error(error['error'].message);\n                    return;\n                }\n\n            }\n        } else {\n            // Client Error Happend\n            // router.navigate(['/error'], { queryParams: { error: error['error'].message } });\n        }\n        // Log the error anyway\n        console.error(error);\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ErrorService {\n\n  constructor() { }\n\n  showAllListHttpError(error: any): void {\n    if (error['status'] === 400) {\n      console.log(error['error']['message']);\n    } else {\n      alert(error['status'] + ' : ' + error['statusText']);\n    }\n  }\n\n  showSearchListHttpError(error: any): void {\n    if (error['status'] === 400) {\n      alert(error['error']['message']);\n    } else {\n      alert(error['status'] + ' : ' + error['statusText']);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MapsAPILoader } from '@agm/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { of } from 'rxjs/observable/of';\nimport { filter, catchError, tap, map, switchMap } from 'rxjs/operators';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\n\ndeclare var google: any;\n\n@Injectable()\nexport class GeocodeService {\n    private geocoder: any;\n    private interval: any;\n\n    constructor(\n        private mapLoader: MapsAPILoader\n        ) { }\n\n    private initGeocoder() {\n        console.log('Init geocoder!');\n        this.geocoder = new google.maps.Geocoder();\n    }\n\n    private waitForMapsToLoad(): Observable<boolean> {\n        if (!this.geocoder) {\n            return fromPromise(this.mapLoader.load())\n                .pipe(\n                    tap(() => this.initGeocoder()),\n                    map(() => true)\n                );\n        }\n        return of(true);\n    }\n\n    geocodeAddress(location: string): Observable<any> {\n        console.log('Start geocoding!');\n        return this.waitForMapsToLoad().pipe(\n            // filter(loaded => loaded),\n            switchMap(() => {\n                return new Observable(observer => {\n                    this.geocoder.geocode({ 'address': location }, (results, status) => {\n                        if (status === google.maps.GeocoderStatus.OK) {\n                            console.log('Geocoding complete!');\n                            observer.next({\n                                lat: results[0].geometry.location.lat(),\n                                lng: results[0].geometry.location.lng()\n                            });\n                        } else {\n                            console.log('Error - ', results, ' & Status - ', status);\n                            observer.next({\n                                lat: 0,\n                                lng: 0\n                            });\n                        }\n                        observer.complete();\n                    });\n                });\n            })\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Url } from '../../_models/url';\nimport { LesionHistory } from '../../_models/LesionHistory';\n\n@Injectable()\nexport class LesionHistoryService {\n  private url = new Url();\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  getLesionHistoryListPageable(page: number, size: number, sort: string): Observable<Object> {\n    return this.httpClient.get(this.url.getUrl() + '/lesion-historys', {\n      params: {\n        'page' : '' + page,\n        'size' : '' + size,\n        'sort' : sort\n      }\n    });\n  }\n\n  getLesionHistoryListPageableSearch(page: number, size: number, sort: string, senderIp: string, reflectorIp: string): Observable<Object> {\n    return this.httpClient.get(this.url.getUrl() + '/lesion-historys', {\n      params: {\n        'page' : '' + page,\n        'size' : '' + size,\n        'sort' : sort,\n        'senderIp' : senderIp,\n        'reflectorIp' : reflectorIp\n      }\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Http } from  '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Url } from '../../_models/url';\nimport { QualityHistory } from '../../_models/QualityHistory';\n\n@Injectable()\nexport class QualityHistoryService {\n  private url = new Url();\n\n  constructor(\n    private httpClient: HttpClient,\n    private http: Http\n  ) { }\n\n  getQualityHistoryListPageable(page: number, size: number, sort: string): Observable<Object> {\n    return this.httpClient.get(this.url.getUrl() + '/quality-historys', {\n      params: {\n        'page' : '' + page,\n        'size' : '' + size,\n        'sort' : sort\n      }\n    });\n  }\n\n  getQualityHistoryListPageableSearch(page: number, size: number, sort: string, senderIp: string, reflectorIp: string): Observable<Object> {\n    return this.httpClient.get(this.url.getUrl() + '/quality-historys', {\n      params: {\n        'page' : '' + page,\n        'size' : '' + size,\n        'sort' : sort,\n        'senderIp' : senderIp,\n        'reflectorIp' : reflectorIp\n      }\n    });\n  }\n\n  getElsCountBySessionId(ehost: string, eport: number, sessId: number): Observable<Object> {\n    const body = {\n      'query' : {\n        'match' : {\n          'session_id' : sessId\n        }\n      }\n    }\n    return this.httpClient.post('http://' + ehost + ':' + eport + '/twamp/_count', body, {\n      headers : {\n        'Content-Type' : 'application/json; charset=UTF-8',\n        'content-encoding' : 'gzip',\n        'Access-Control-Allow-Methods' : 'GET, POST, OPTIONS',\n        'Access-Control-Allow-Origin' : '*',\n        'Access-Control-Allow-Headers' : 'Origin, X-Requested-With, Content-Type, Accept'\n    }});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Url } from '../../_models/url';\nimport { Reflector } from '../../_models/Reflector';\nimport { Protocol } from \"../../_models/Dashboard\";\n\n@Injectable()\nexport class ReflectorService {\n  private url = new Url();\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  // getReflectorList(): Observable<Object> {\n  //   return this.httpClient.get(this.url.getUrl() + '/reflectors');\n  // }\n\n  private createRequestOptions(): {} {\n    let token: string;\n\n    const headers = new HttpHeaders;\n\n    headers.append('Content-Type', 'application/json; charset=utf-8');\n    headers.append('Connection', 'keep-alive');\n    // headers.append('Token', token);\n    const requestOptions = {\n      headers: headers,\n      withCredentials: true\n    };\n\n    return requestOptions;\n}\n\n\n  getReflectorAllList(): Observable<Object> {\n    return this.httpClient.get(this.url.getUrl() + '/reflectors/all');\n  }\n\n  getReflectorListPageable(page: number, size: number, sort: string): Observable<Object> {\n    return this.httpClient.get(this.url.getUrl() + '/reflectors', {\n      params: {\n        'page' : '' + page,\n        'size' : '' + size,\n        'sort' : sort\n      }\n    });\n  }\n\n  getReflectorListPageableSearch(page: number, size: number, sort: string, reflectorIp: string, protocol: string): Observable<Object> {\n    return this.httpClient.get(this.url.getUrl() + '/reflectors', {\n      params: {\n        'page' : '' + page,\n        'size' : '' + size,\n        'sort' : sort,\n        'reflectorIp': reflectorIp,\n        'protocol' : protocol\n      }\n    });\n  }\n\n  ReflectorRegister(reflector: Reflector): Observable<Object> {\n    return this.httpClient.post(this.url.getUrl() + '/reflector', reflector, this.createRequestOptions());\n  }\n\n  ReflectorUpdate(reflector: Object): Observable<Object> {\n    return this.httpClient.put(this.url.getUrl() + '/reflector/' + reflector['reflectorId'], reflector, this.createRequestOptions());\n  }\n\n  ReflectorDelete(reflector: Object): Observable<Object> {\n    return this.httpClient.delete(this.url.getUrl() + '/reflector/' + reflector['reflectorId'], this.createRequestOptions());\n  }\n}\n","module.exports = \"<!-- title -->\\n<div class=\\\"title_area\\\">\\n  <div class=\\\"title\\\">빅데이터 분석</div>\\n</div>\\n<!-- end title -->\\n\\n<!-- search-->\\n<div class=\\\"search_view\\\">\\n  <form name=\\\"form1\\\" method=\\\"post\\\" action=\\\"\\\" novalidate [formGroup]=\\\"qualityHistoryForm\\\" (ngSubmit)=\\\"onAnalysisClick()\\\">\\n    <table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"6\\\" class=\\\"search_analysis\\\">\\n      <tr>\\n        <th>Sender IP</th>\\n        <td *ngIf=\\\"selectAll\\\" class=\\\"left\\\" style=\\\"padding-right: 20px;\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" class=\\\"\\\" style=\\\"background: #dadada\\\" disabled>\\n        </td>\\n        <td [hidden]=\\\"selectAll\\\" class=\\\"left\\\" style=\\\"padding-right: 20px;\\\">\\n            <input type=\\\"text\\\" name=\\\"textfield\\\" class=\\\"\\\" [(ngModel)]=\\\"inputAnalysisItem.senderIp\\\" placeholder=\\\"Sender IP 입력\\\" formControlName=\\\"senderIp\\\">\\n        </td>\\n        <th>Reflector IP</th>\\n        <td *ngIf=\\\"selectAll\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" class=\\\"\\\" style=\\\"background: #dadada\\\" disabled>\\n        </td>\\n        <td [hidden]=\\\"selectAll\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" class=\\\"\\\" [(ngModel)]=\\\"inputAnalysisItem.reflectorIp\\\" placeholder=\\\"Reflector IP 입력\\\" formControlName=\\\"reflectorIp\\\">\\n        </td>\\n        <th colspan=\\\"2\\\" style=\\\"background: white;\\\">\\n          <b class=\\\"checkboxb\\\">\\n            전체선택\\n              <input type=\\\"checkbox\\\" name=\\\"checkbox\\\" class=\\\"checkbox\\\" [checked]=\\\"selectAll\\\" (change)=\\\"isCheck = $event.target.checked; selectAllCheckBoxClick($event.target.checked)\\\">\\n          </b>\\n        </th>\\n        <!-- <td style=\\\"padding-right: 30px;\\\">\\n            <input type=\\\"checkbox\\\" name=\\\"checkbox\\\" [checked]=\\\"selectAll\\\" (change)=\\\"isCheck = $event.target.checked; selectAllCheckBoxClick($event.target.checked)\\\">\\n        </td> -->\\n      </tr>\\n      <tr>\\n        <th>측정 시작시간</th>\\n        <td>\\n            <input placeholder=\\\"측정 시작 시간 입력\\\"\\n            [(ngModel)]=\\\"inputStartTime\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\n            [owlDateTimeTrigger]=\\\"dst\\\" [owlDateTime]=\\\"dst\\\">\\n            <owl-date-time #dst></owl-date-time>\\n        </td>\\n        <th>\\n          측정 종료시간\\n        </th>\\n        <td colspan=\\\"2\\\">\\n            <input placeholder=\\\"측정 종료 시간 입력\\\"\\n            [(ngModel)]=\\\"inputEndTime\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\n            [owlDateTimeTrigger]=\\\"det\\\" [owlDateTime]=\\\"det\\\">\\n            <owl-date-time #det></owl-date-time>\\n        </td>\\n      </tr>\\n      <tr>\\n        <th style=\\\"background: url(app/_views/_images/icon_white.png); padding: 0\\\" colspan=\\\"8\\\">\\n          <div class=\\\"middle_line\\\">\\n            임계치 설정\\n          </div>\\n        </th>\\n      </tr>\\n      <tr>\\n        <th>Lost Packets</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" class=\\\"threshold\\\" [(ngModel)]=\\\"inputAnalysisItem.lostPacketTH\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n        </td>\\n        <th>Duplicate Packets</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" class=\\\"threshold\\\" [(ngModel)]=\\\"inputAnalysisItem.duplicatePacketTH\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n        </td>\\n        <th>Out Of Order Packets</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" class=\\\"threshold\\\" [(ngModel)]=\\\"inputAnalysisItem.outoforderPacketTH\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n        </td>\\n      </tr>\\n      <tr>\\n        <th>PDV</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" class=\\\"threshold\\\" [(ngModel)]=\\\"inputAnalysisItem.pdvTH\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n        </td>\\n        <th>IPDV</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" class=\\\"threshold\\\" [(ngModel)]=\\\"inputAnalysisItem.ipdvTH\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n        </td>\\n      </tr>\\n      <tr>\\n        <td colspan=\\\"8\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn\\\" style=\\\"position: relative; left: 50%; transform: translateX(-55%);\\\" \\n            mat-raised-button [ngClass]=\\\"{'btn-primary' : qualityHistoryForm.valid, 'disabled' : !qualityHistoryForm.valid}\\\"\\n            [disabled]=\\\"!qualityHistoryForm.valid\\\">분석</button>\\n        </td>\\n      </tr>\\n      <!-- <tr *ngIf=\\\"isAnalyzed\\\">\\n        <td>\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" mat-raised-button (click)=\\\"onAllListClick()\\\">전체 목록 보기</button>\\n        </td>\\n      </tr> -->\\n    </table>\\n  </form>\\n</div>\\n<!-- end search -->\\n\\n<span *ngIf=\\\"listIsExist && !isAnalyzing && isAnalyzed\\\">\\n  <!-- table -->\\n  <div class=\\\"table_header\\\">\\n    <div class=\\\"th_page\\\">\\n      <b>총\\n        <span>{{count}}</span> 건</b> [{{pg}}/{{allpage}}페이지]\\n        <b style=\\\"float: right;\\\">소요 시간: <span>{{achiveTime}}</span>초</b></div>\\n  </div>\\n\\n  <table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"list_tl\\\">\\n    <tr>\\n      <th>측정 시작시간</th>\\n      <th>측정 완료시간</th>\\n      <th>Sender IP</th>\\n      <th>Reflector IP</th>\\n      <th>Lost Packets</th>\\n      <th>Duplicate Packets</th>\\n      <th>Out of Order Packet</th>\\n      <th>PDV</th>\\n      <th>IPDV</th>\\n      <!-- <th>비고</th> -->\\n    </tr>\\n    <tr *ngFor=\\\"let data of analysisBigdata\\\">\\n      <td>{{data._source.start_time.replace('T', ' ').replace('+0000', '')}}</td>\\n      <td>{{data._source.end_time.replace('T', ' ').replace('+0000', '')}}</td>\\n      <td>{{data._source.src_host}}</td>\\n      <td>{{data._source.dst_host}}</td>\\n      <td>{{data._source.up_lost_packets + data._source.down_lost_packets}}</td>\\n      <td>{{data._source.up_duplicate_packets + data._source.down_duplicate_packets}}</td>\\n      <td>{{data._source.up_outoforder_packets + data._source.down_outoforder_packets}}</td>\\n      <td>{{data._source.pdv.pdv}}</td>\\n      <td>{{data._source.ipdv.ipdv}}</td>\\n    </tr>\\n  </table>\\n\\n  <!-- end table -->\\n\\n  <!-- pageing -->\\n  <div class=\\\"pagin_area\\\">\\n    <div class=\\\"paging\\\">\\n      <span *ngIf=\\\"pg > block && pg != 1\\\">\\n        <a (click)=\\\"pageMove(0)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_first.png\\\" border=\\\"0\\\" align=\\\"absmiddle\\\" alt=\\\"back\\\">\\n        </a>\\n        <a (click)=\\\"pageMove(pg - 2)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_prev.png\\\" border=\\\"0\\\" alt=\\\"back\\\">\\n        </a>\\n      </span>\\n      <span *ngFor=\\\"let index of paginationIndex\\\">\\n        <span *ngIf=\\\"pg == index; else notvalid\\\">\\n          <span (click)=\\\"pageMove(index - 1)\\\" class=\\\"r\\\">{{index}}</span>\\n        </span>\\n        <ng-template #notvalid>\\n          <span style=\\\"cursor:pointer;\\\" *ngIf=\\\"pg >= index || index <= allpage\\\">\\n            <a (click)=\\\"pageMove(index - 1)\\\">{{index}}</a>\\n          </span>\\n        </ng-template>\\n      </span>\\n      <span *ngIf=\\\"endpage < allpage\\\">\\n        <a (click)=\\\"pageMove(pg)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_next.png\\\" border=\\\"0\\\" alt=\\\"next\\\">\\n        </a>\\n        <a (click)=\\\"pageMove(allpage - 1)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_last.png\\\" border=\\\"0\\\" alt=\\\"next\\\">\\n        </a>\\n      </span>\\n    </div>\\n  </div>\\n  <!--end pageing-->\\n</span>\\n<span *ngIf=\\\"!listIsExist && !isAnalyzing && !isAnalyzed\\\">\\n<!-- <span> -->\\n  <div class=\\\"div_quality\\\">\\n    <div class=\\\"analysis_progress_bar\\\">빅데이터 분석을 진행해 주세요.</div>\\n  </div>\\n</span>\\n\\n<span *ngIf=\\\"!listIsExist && isAnalyzing && !isAnalyzed\\\">\\n<!-- <span> -->\\n  <div class=\\\"div_quality\\\">\\n    <div class=\\\"analysis_progress_bar\\\">\\n      <mat-progress-bar class=\\\"green-progress\\\" mode=\\\"indeterminate\\\" style=\\\"top: -10px;\\\"></mat-progress-bar>\\n    </div>\\n    <div class=\\\"analysis_progress_bar\\\" style=\\\"top: 5px;\\\">\\n        분석중 입니다 ...\\n      </div>\\n  </div>\\n</span>\\n\\n<span *ngIf=\\\"!listIsExist && !isAnalyzing && isAnalyzed\\\">\\n<!-- <span> -->\\n  <div class=\\\"div_quality\\\">\\n    <div class=\\\"qual_text\\\">분석 조건에 해당하는 값이 없습니다.</div>\\n  </div>\\n</span>\\n\\n<!-- 그래프 -->\\n<!-- <div class=\\\"div_quality\\\">\\n  <p>\\n    <img src=\\\"app/_views/_images/img_sample.gif\\\" border=\\\"0\\\">\\n  </p>\\n</div> -->\"","import { Component, Inject, OnInit, OnDestroy, ComponentRef } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material';\nimport { Router, NavigationEnd } from '@angular/router';\n\nimport { QualityHistoryService } from '../../_services/qualityHistory/quality-history.service';\nimport { MessageService } from '../../_services/Message/message.service';\nimport { ConfigService } from '../../_services/config/config.service';\nimport { AppConfig } from '../../_services/config/AppConfig';\nimport { ErrorService } from '../../_services/error/error.service';\nimport { AnalysisBigdataService } from '../../_services/AnalysisBigdata/analysis-bigdata.service';\nimport { FormControl, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { SafeResourceUrl, DomSanitizer } from '@angular/platform-browser';\n\nimport { KibanaInfo } from '../../_models/KibanaInfo';\nimport { AnalysisBigdata } from '../../_models/AnalysisBigdata';\n\nimport { DateTimeAdapter, OWL_DATE_TIME_FORMATS, OWL_DATE_TIME_LOCALE } from 'ng-pick-datetime';\nimport { MomentDateTimeAdapter, OWL_MOMENT_DATE_TIME_FORMATS } from 'ng-pick-datetime-moment';\n\nimport { takeWhile } from 'rxjs/operators';\n\nimport * as _moment from 'moment';\nconst moment = _moment;\n\n@Component({\n    templateUrl: 'analysis-bigdata.component.html',\n    providers: [\n        {provide: OWL_DATE_TIME_LOCALE, useValue: 'ko'},\n        // `MomentDateAdapter` and `MAT_MOMENT_DATE_FORMATS` can be automatically provided by importing\n        // `MatMomentDateModule` in your applications root module. We provide it at the component level\n        // here, due to limitations of our example generation script.\n        {provide: DateTimeAdapter, useClass: MomentDateTimeAdapter, deps: [OWL_DATE_TIME_LOCALE]},\n        {provide: OWL_DATE_TIME_FORMATS, useValue: OWL_MOMENT_DATE_TIME_FORMATS},\n      ],\n})\nexport class AnalysisBigdataComponent implements OnDestroy {\n\n    /**\n     * 구독 관련 변수\n     */\n    private subscription: Subscription;\n    private alive: boolean;\n\n    public analysisBigdata: object;\n    \n    // ------------------------------------------------------------------------\n    // ----------------------------- Pagination -------------------------------\n    private sort: string;\n    private size: number;\n    public pg: number; // 현재 페이지\n    public block: number; // 하단 페이지 넘버 개수\n    public count: number; // 검색 결과 총 개수\n\n    public allpage: number;      // 모든 페이지 수\n    private startpage: number;    // 첫 페이지\n    public endpage: number;      // 마지막 페이지\n\n    public paginationIndex: number[];\n\n    private ERROR_NOT_FOUND: string;\n\n    // ------------------------------------------------------------------------\n    // -------------------------- form Validation -----------------------------\n    public qualityHistoryForm: FormGroup;\n    private formSenderIp: FormControl;\n    private formReflectorIp: FormControl;\n\n    /**\n     * ----------------------------------------------------------------------------\n     * 분석 항목 입력 변수\n     * ----------------------------------------------------------------------------\n     */\n    public inputAnalysisItem: AnalysisBigdata;\n    public storedAnalysisItem: AnalysisBigdata;\n    public inputStartTime: _moment.Moment;\n    public inputEndTime: _moment.Moment;\n\n\n    // ----------------------------------------------------------------------------\n    // -------------------------- Select All CheckBox -----------------------------\n    public selectAll: boolean;\n    private tmpSenderIp: string;\n    private tmpReflectorIp: string;\n\n\n    /**\n     * 현재 진행 상황 관련\n     */\n    public listIsExist: boolean;\n    public isAnalyzing: boolean;\n    public isAnalyzed: boolean;\n\n    public isCheck: boolean;\n    /**\n     * 분석 소요 시간\n     */\n    public achiveTime: string;\n    private timezone: number;\n\n    constructor(\n        private dialog: MatDialog,\n        private analysisBigdataService: AnalysisBigdataService,\n        private messageService: MessageService,\n        private errorService: ErrorService\n    ) {\n        this.initData();\n        this.getGlobalMessage();\n        this.validation();\n        // this.pageMove(0);\n    }\n\n    /**\n     * Data Init\n     */\n    private initData() {\n        this.alive = true;\n        this.sort = 'sessId,desc';\n        this.size = AppConfig.settings.pagination.size;\n        this.block = AppConfig.settings.pagination.block; // 하단 페이지 넘버 개수\n        this.ERROR_NOT_FOUND = 'Not found pageable By Analysis Bigdata';\n        this.inputAnalysisItem = new AnalysisBigdata();\n        this.storedAnalysisItem = new AnalysisBigdata();\n        this.inputStartTime = null;\n        this.inputEndTime = null;\n        this.selectAll = false;\n        this.tmpSenderIp = '';\n        this.tmpReflectorIp = '';\n        this.listIsExist = false;\n        this.isAnalyzing = false;\n        this.isAnalyzed = false;\n        this.achiveTime = '';\n        this.timezone = 32400;\n        this.isCheck = false;\n    }\n\n    /**\n     * 해당 컴포넌트가 삭제된 직후에 alive = false 함으로써,\n     * 구독한 서비스들을 해제한다.\n     */\n    ngOnDestroy() {\n        this.alive = false;\n    }\n\n    /**\n     * 다른 컴포넌트에서 보낸 메세지를 받기 위해서 해당 함수를 구독한다.\n     * 구독중일때 메세지를 받으면 메세지에 따라서 처리 가능\n     */\n    getGlobalMessage(): void {\n        const that = this;\n        this.subscription = this.messageService\n            .getMessage().takeWhile(() => this.alive)\n            .subscribe(message => {\n                alert(message);\n                that.isAnalyzing = false;\n            });\n    }\n\n    /**\n     * 분석 버튼 클릭\n     * @param pageNumber \n     *                  화면에 나타낼 Page Index\n     */\n    private requestAnalysisBigdataSearch(pageNumber: number): void {\n        const that = this;\n\n        if (this.inputStartTime === null || this.inputStartTime.toString() === '' || this.inputStartTime === undefined) {\n            alert('측정 시작 시간을 입력해 주세요.');\n            this.onSearchFail();\n            return;\n        } else {\n            // if (true) {\n            //     this.inputStartTime = this.inputStartTime.subtract(9, 'hours');\n            // }\n            this.inputAnalysisItem.startTime = this.inputStartTime.toISOString(true).split('.')[0].replace('T', ' ');\n        }\n\n        if (this.inputEndTime === null || this.inputEndTime.toString() === '' || this.inputEndTime === undefined) {\n            alert('측정 종료 시간을 입력해 주세요.');\n            this.onSearchFail();\n            return;\n        } else {\n            // if (true) {\n            //     this.inputEndTime = this.inputEndTime.subtract(9, 'hours');\n            // }\n            this.inputAnalysisItem.endtime = this.inputEndTime.toISOString(true).split('.')[0].replace('T', ' ');\n        }\n\n        this.searchESBigdata(that, this.inputAnalysisItem, pageNumber);\n    }\n\n    /**\n     * 그래프 Dialog창 open\n     * 현재 쓰이지 않음. 추가사항 있을시 추가\n     * @param sessId \n     * @param repeatCount \n     * @param startTime \n     * @param endTime \n     * @param meResult \n     * @param protocol \n     */\n    // private openQualityHistoryGraphDialog(sessId: number, repeatCount: number, startTime: string, endTime: string, meResult: string, protocol: string): void {\n    //     const dialogRef = this.dialog.open(AnalysisBigdataDialog, {\n    //         height: '80%',\n    //         width: '80%',\n    //         minWidth: '600px',\n    //         data : {\n    //             'sessId' : sessId,\n    //             'repeatCount' : repeatCount,\n    //             'startTime' : startTime,\n    //             'endTime' : endTime,\n    //             'measureresult' : meResult,\n    //             'protocol' : protocol\n    //         },\n    //         autoFocus: true\n    //     });\n    //     // dialogRef.\n    //     dialogRef.afterClosed().subscribe(result => {\n    //         console.log('The dialog was cloased');\n    //     });\n    // }\n\n    /**\n     * 시작시간(t1)과 종료시간(t2) 사이의 차이를 구함.\n     * 삭제할 예정.\n     * @param t1 \n     *              시작시간\n     * @param t2 \n     *              종료시간\n     */\n    // private calCulrequiredTime(t1: _moment.Moment, t2: _moment.Moment) {\n    //     const day = moment.duration(t2.diff(t1)).days();\n    //     const hours = moment.duration(t2.diff(t1)).hours();\n    //     const minute = moment.duration(t2.diff(t1)).minutes();\n    //     const second = moment.duration(t2.diff(t1)).seconds();\n    //     const millSec = moment.duration(t2.diff(t1)).milliseconds();\n        \n    //     return second + '.' + millSec + '';\n    // }\n\n    /**\n     * 분석 버튼 클릭\n     */\n    public onAnalysisClick(): void {\n        this.isAnalyzing = true;\n        this.isAnalyzed = false;\n        this.listIsExist = false;\n        this.requestAnalysisBigdataSearch(0);\n    }\n\n    /**\n     * 분석 실패시 값 변경\n     */\n    private onSearchFail(): void {\n        this.isAnalyzing = false;\n        this.isAnalyzed = false;\n        this.listIsExist = false;\n    }\n\n\n    /**\n     * Page 이동시 호출\n     * @param pageNumber \n     *                  이동할 Page Number\n     */\n    public pageMove(pageNumber: number): void {\n        const that = this;\n        this.listIsExist = false;\n        this.isAnalyzing = true;\n        this.isAnalyzed = false;\n        this.searchESBigdata(that, this.storedAnalysisItem, pageNumber);\n    }\n\n\n    /**\n     * 빅데이터 분석 버튼 클릭시 API Call\n     * @param that \n     * @param pageNumber\n     */\n    private searchESBigdata(that: this, data: AnalysisBigdata, pageNumber: number): void {\n        if (this.selectAll) {\n            this.setSenderIPReflectorIP(true);\n        }\n        this.analysisBigdataService\n                                .RequestAnalysisBigdata(data, pageNumber, that.size, that.sort)\n                                                                .pipe(takeWhile(() => this.alive))\n                                                                .subscribe(\n                                                                    result => {\n                                                                        that.isAnalyzing = false;\n                                                                        if (result['result']['resultData']['content'].length === 0) {\n                                                                            that.listIsExist = false;\n                                                                            this.isAnalyzed = true;\n                                                                        } else {\n                                                                            that.listIsExist = true;\n                                                                            that.isAnalyzed = true;\n                                                                            console.log(result);\n                                                                            that.storedAnalysisItem = that.inputAnalysisItem;\n                                                                            that.setPagingInfo(result, pageNumber);\n                                                                        }\n                                                                        if (that.selectAll) {\n                                                                            that.setSenderIPReflectorIP(false);\n                                                                        }\n                                                                    }, error => {\n                                                                        console.log(error);\n                                                                        alert('분석 실패');\n                                                                        that.isAnalyzing = false;\n                                                                        that.isAnalyzed = false;\n                                                                        if (that.selectAll) {\n                                                                            that.setSenderIPReflectorIP(false);\n                                                                        }\n                                                                    }\n                                                                    \n                                                                );\n    }\n\n    /**\n     * Page 관련 함수\n     * Pagination 관련 부분은 추후에 Service로 합칠것\n     * @param result \n     * @param page \n     */\n    private setPagingInfo(result: Object, page: number): void {\n        const responseData: Object = result;\n        console.log(responseData['message']);\n        this.analysisBigdata = responseData['result']['resultData']['content'];\n        this.achiveTime = responseData['result']['searchAchiveTime'];\n        this.count = responseData['result']['resultData']['totalElements'];\n        this.allpage = Math.ceil(this.count / this.size);\n        this.pg = page + 1;\n        this.startpage = (Math.floor((this.pg - 1) / this.block) * this.block) + 1;\n        this.endpage = (Math.floor((this.pg - 1) / this.block) * this.block) + this.block;\n        this.paginationIndex = Array.from(Array(this.endpage - this.startpage + 1), (x, i) => i + this.startpage);\n    }\n\n    /**\n     * Form Validation\n     */\n    private validation(): void {\n        this.formSenderIp = new FormControl('', Validators.compose([\n            Validators.pattern('^$|^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'),\n            Validators.required\n        ]));\n        this.formReflectorIp = new FormControl('', Validators.compose([\n            Validators.pattern('^$|^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'),\n            Validators.required\n        ]));\n        this.qualityHistoryForm = new FormGroup({\n            senderIp: this.formSenderIp,\n            reflectorIp: this.formReflectorIp\n        });\n    }\n\n    // private judgeGetListHttpError(error: any): void {\n    //     console.log(error);\n    //     if (error['status'] === 504) {\n    //         alert(error['status'] + ' : ' + error['statusText']);\n    //     } else if (error['error'].result.indexOf(this.ERROR_NOT_FOUND) != -1) {\n    //         this.listIsExist = false;\n    //     } else {\n    //         this.errorService.showAllListHttpError(error);\n    //     }\n    // }\n\n    /**\n     * 전체 선택 체크박스 선택시 \n     * \n     * @param ischecked \n     */\n    public selectAllCheckBoxClick(ischecked: boolean): void {\n        this.selectAll = (ischecked === false ? this.selectAll = false : this.selectAll = true);\n        if (ischecked) {\n            this.tmpSenderIp = this.inputAnalysisItem.senderIp;\n            this.tmpReflectorIp = this.inputAnalysisItem.reflectorIp;\n            this.setSenderIPReflectorIP(false);\n        } else {\n            this.inputAnalysisItem.senderIp = this.tmpSenderIp;\n            this.inputAnalysisItem.reflectorIp = this.tmpReflectorIp;\n        }\n    }\n\n    private setSenderIPReflectorIP(value: boolean): void {\n        if (value) {\n            this.inputAnalysisItem.senderIp = '';\n            this.inputAnalysisItem.reflectorIp = '';\n        } else {\n            this.inputAnalysisItem.senderIp = '0.0.0.0';\n            this.inputAnalysisItem.reflectorIp = '0.0.0.0';\n        }\n    }\n\n}\n\n\n/**\n * 아직 작업하지않은 부분 (빅데이터 분석탭의 그래프 화면이 필요하지않음.)\n * 나중에 추가 위하려 품질이력 탭의 그래프 코드를 삽입해 놓음.\n */\n@Component({\n    templateUrl: 'analysis-bigdata.dialog.html'\n})\nexport class AnalysisBigdataDialog implements OnDestroy{\n\n    public kibanaInfo: KibanaInfo = new KibanaInfo(0, '');\n\n    private readonly ERROR_NOT_FOUND = 'Not found pageable By Kibana Info';\n\n    private readonly kibanaVersion = AppConfig.settings.kibana.version;\n\n    private alive = true;\n    private sessId: number;\n    public repeatCount: number;\n\n    public startTime: any;\n    public endTime: any;\n    public meResult: string;\n    public protocol: string;\n\n    public graphShow = false;\n    allUrl: string;\n    \n    // private uuids = [ 'lp_', 'duplicate_packets_', 'ooop_', 'pdv_', 'ipdv_', 'inter_delay_', 'rtt_', 'up_delay_', 'down_delay_', 'ld_', 'ttl_' ]; // TEMP\n    private uuidsTwamp = ['up_lp_', 'down_lp_', 'up_duplicate_packets_', 'down_duplicate_packets_', 'up_ooop_', 'down_ooop_', 'up_pdv_', 'down_pdv_', 'up_ipdv_', 'down_ipdv_', 'inter_delay_', 'rtt_', 'up_delay_', 'down_delay_', 'ttl_']; // TWAMP\n    private uuidsIcmp = [ 'lp_', 'duplicate_packets_', 'ooop_', 'pdv_', 'ipdv_', 'rtt_']; // ICMP\n\n    public iframeAllUrl: SafeResourceUrl;\n\n    constructor(\n        private dialogRef: MatDialogRef<AnalysisBigdataDialog>,\n        @Inject(MAT_DIALOG_DATA) private data: any,\n        private domSanitizer: DomSanitizer,\n        private configService: ConfigService,\n        private qualityHistoryService: QualityHistoryService,\n        private router: Router\n    ) {\n        this.sessId = data.sessId;\n        this.repeatCount = data.repeatCount;\n        this.meResult = data.measureresult;\n        this.protocol = data.protocol;\n        \n        /**\n         * 2018-09-28 수정 전\n         */\n        // if ((this.repeatCount === 3600 || this.repeatCount === 7200) && this.meResult === '측정중...') {\n        //     this.startTime = this.setTime(new Date(parseInt(this.setStartTime(data.startTime.replace(' ', 'T')) + '000')));\n        // } else if ((this.repeatCount === 3600 || this.repeatCount === 7200) && this.meResult !== '측정중...') {\n        //     this.startTime = this.setTime(new Date(parseInt(this.setStartTime(data.startTime.replace(' ', 'T'), data.endTime.replace(' ', 'T')) + '000')));\n        // } else {\n        //     this.startTime = data.startTime.replace(' ', 'T');\n        // }\n\n        // if (((this.repeatCount === 3600 || this.repeatCount === 7200) && this.meResult === '측정중...')) {\n        //     this.endTime = this.setTime();\n        // } else if (this.repeatCount === 600) {\n        //     this.graphShow = true;\n        //     this.endTime = this.setTime();\n        //     this.iFrameAddListener();\n        // } else {\n        //     this.graphShow = true;\n        //     this.endTime = data.endTime.replace(' ', 'T');\n        //     this.iFrameAddListener();\n        // }\n\n        // if ((this.repeatCount === 3600 || this.repeatCount === 7200)) {\n        // } else {\n        //     this.loadKibanaUrl();\n        // }\n\n        /**\n         * 2018-09-28 수정 후\n         */\n        if (this.meResult === \"측정중...\") {\n          this.startTime = this.setTime(new Date(parseInt(this.setStartTime(data.startTime.replace(\" \", \"T\")) + \"000\")));\n        } else if (this.meResult !== \"측정중...\") {\n          this.startTime = this.setTime(new Date(parseInt(this.setStartTime(data.startTime.replace(\" \", \"T\"), data.endTime.replace(\" \", \"T\")) + \"000\")));\n        }\n\n        this.graphShow = true;\n        this.iFrameAddListener();\n        if (this.meResult === \"측정중...\") {\n          this.endTime = this.setTime();\n        } else {\n          this.endTime = data.endTime.replace(\" \", \"T\");\n        }\n\n        this.loadKibanaUrl();\n    }\n\n    /**\n     * start Time 설정\n     * @param st DB에 저장된 start Time\n     * @param endTime End Time\n     */\n    private setStartTime(st: string, endTime?: string): any {\n        const qwe = st.replace('.000', '');\n        let asd;\n        if (endTime === null || endTime === undefined || endTime === '') {\n            asd = this.setTime();\n        } else {\n            asd = endTime.replace('.000', '');\n        }\n        let startTime = parseInt(Date.parse(qwe).toString().replace('000', ''));\n        let currentTime = parseInt(Date.parse(asd).toString().replace('000', ''));\n\n        let intervalTime;\n        if (this.repeatCount === 300) {\n            intervalTime = 300;\n        } else {\n            intervalTime = 1500;\n        }\n        // if (currentTime - intervalTime > startTime) {\n        //     return currentTime - intervalTime;\n        // } else {\n        //     return startTime;\n        // }\n        if (currentTime - intervalTime > startTime || this.repeatCount <= 300) {\n            if (this.repeatCount === 300) {\n                return startTime;\n            } else {\n                return currentTime - intervalTime;\n            }\n        } else {\n            return startTime;\n        }\n    }\n\n    /**\n     * 시간 설정\n     * date 인자 값이 없으면 현재 시간\n     * date 인자 값이 있으면 date 값의 시간\n     * @param date \n     */\n    setTime(date?: Date): string {\n        let time: string;\n        let dt;\n        if (date === undefined || date === null) {\n            dt = new Date();\n        } else {\n            dt = date;\n        }\n        // const sdf = dt.getDate();\n        // const asd = dt.getTimezoneOffset();\n        // const dfg = dt.getMonth() + 1;\n        // const xcv = dt.getUTCMonth();\n        // const cvb = dt.getDay();\n        // const fgh = dt.getHours();\n        // const uyi = dt.getMinutes();\n        // const qwe = new Date().toISOString();\n\n        const year = dt.getFullYear();\n\n        let month: string | number = this.formatTwoDigits(dt.getMonth() + 1);\n\n        let day: string | number = this.formatTwoDigits(dt.getDate());\n\n        let hours: string | number = this.formatTwoDigits(dt.getHours());\n\n        let minutes: string | number = this.formatTwoDigits(dt.getMinutes());\n\n        let seconds: string | number = this.formatTwoDigits(dt.getSeconds());\n\n        let milisec: string | number = dt.getMilliseconds();\n        if (milisec >= 0 && milisec < 10) {\n            milisec = '00' + milisec;\n        } else if (milisec >= 10 && milisec < 100) {\n            milisec = '0' + milisec;\n        }\n\n        time = year + '-' + month + '-' + day + 'T' + hours + ':' + minutes + ':' + seconds;\n        return time;\n    }\n\n    formatTwoDigits(n: string | number): string | number {\n\n        return n < 10 ? '0' + n : n;\n    }\n\n    ngOnDestroy() {\n        this.alive = false;\n    }\n\n    public onTimeSearch(): void {\n        this.graphShow = true;\n        this.iFrameAddListener();\n        this.loadKibanaUrl();\n    }\n\n    private setInterval(): void {\n        this.qualityHistoryService.getElsCountBySessionId(this.kibanaInfo[0].host, this.kibanaInfo[0].eport, this.sessId).takeWhile(() => this.alive).subscribe(\n            responseData => {\n                console.log(responseData);\n            }\n        )\n    }\n\n    private loadKibanaUrl(): void {\n        const that = this;\n        this.configService.getKibanaListAll().takeWhile(() => this.alive).subscribe(\n            responseData => {\n                that.kibanaInfo = responseData['result']['content'];\n                that.setIframeUrl();\n            },\n            error => {\n                if (error['error'].result.indexOf(that.ERROR_NOT_FOUND) != -1) {\n                    alert(error['error']['message']);\n                }\n                console.log(error['error']['message']);\n            }\n        )\n    }\n\n    public onNoClick(): void {\n        this.dialogRef.close(null);\n    }\n\n    private setIframeUrl(): void {\n        // if (this.repeatCount === -1) {\n        //     this.setUrlByInfi();\n        // } else {\n        //     this.setUrl();\n        // }\n        (this.repeatCount === 300 || this.repeatCount === 600 || this.repeatCount === 3600 || this.repeatCount === 7200) ? this.setUrlByInfi() : this.setUrl();\n        this.iframeAllUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(this.allUrl);\n        this.router.events.subscribe((evt) => {\n            if (!(evt instanceof NavigationEnd)) {\n                return;\n            }\n            window.scrollTo(0, 0)\n        });\n    }\n\n    setUrl() {\n        let uuidLength: number;\n        let uuids: string[];\n\n        if (this.protocol === 'TWAMP') {\n            uuidLength = this.uuidsTwamp.length + 1;\n            uuids = this.uuidsTwamp;\n        } else if (this.protocol === 'ICMP') {\n            uuidLength = this.uuidsIcmp.length + 1;\n            uuids = this.uuidsIcmp;\n        }\n\n        let gIdx = this.kibanaInfo[0].url.indexOf('?_g=()');\n        let addgIdxResult = this.strInsert(this.kibanaInfo[0].url, gIdx + 1, 'embed=true&');\n        let visCfgStr = '';\n        let locx: number;\n        let locy = 0;\n        let count = 0;\n        for (let a = 1; a < uuidLength; a++) {\n            if (a > 1) {\n                visCfgStr += ',';\n            }\n            if (a % 2 == 0) {\n                locx = 24;\n            } else { locx = 0; }\n\n            visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + a + '\\',w:24,x:' + locx + ',y:' + locy + '),id:\\'' + uuids[a - 1] + this.repeatCount + '\\',panelIndex:\\'' + a + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n            count++;\n            if (count == 2) {\n                locy += 15;\n                count = 0;\n            }\n        }\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'1\\',w:24,x:0,y:0),id:\\'' + this.LP_UUID + this.repeatCount + '\\',panelIndex:\\'1\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'2\\',w:24,x:24,y:0),id:\\'' + this.DP_UUID + this.repeatCount + '\\',panelIndex:\\'2\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'3\\',w:24,x:0,y:15),id:\\'' + this.OoOP_UUID + this.repeatCount + '\\',panelIndex:\\'3\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'4\\',w:24,x:24,y:15),id:\\'' + this.PDV_UUID + this.repeatCount + '\\',panelIndex:\\'4\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'5\\',w:24,x:0,y:30),id:\\'' + this.IPDV_UUID + this.repeatCount + '\\',panelIndex:\\'5\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'6\\',w:24,x:24,y:30),id:\\'' + this.ID_UUID + this.repeatCount + '\\',panelIndex:\\'6\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'7\\',w:24,x:0,y:45),id:\\'' + this.RTT_UUID + this.repeatCount + '\\',panelIndex:\\'7\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'8\\',w:24,x:24,y:45),id:\\'' + this.LD_UUID + this.sessId + '\\',panelIndex:\\'8\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'9\\',w:24,x:0,y:60),id:\\'' + this.TTL_UUID + this.sessId + '\\',panelIndex:\\'9\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        let visCfgIdx = addgIdxResult.indexOf('panels:!()');\n        let addVisCfgResult = this.strInsert(addgIdxResult, visCfgIdx + 9, visCfgStr);\n\n        const startTimeparse = Date.parse(this.startTime);\n        const endTimeparse = Date.parse(this.endTime);\n\n        let filters = '(\\'$state\\':(store:appState),meta:(alias:!n,disabled:!f,index:\\'77b1b590-9ac5-11e8-92d3-7f0263a523d8\\',key:start_time,negate:!f,params:(format:epoch_millis,gte:' + startTimeparse + ',lt:' + endTimeparse + '),type:range,value:\\'September%205th%202018,%2011:25:13.333%20to%20September%205th%202018,%2012:05:37.575\\'),range:(start_time:(format:epoch_millis,gte:' + startTimeparse + ',lt:' + endTimeparse + ')))';\n\n        let visFilterIdx = addVisCfgResult.indexOf('ilters:!(),fullS');\n        let addVisFilterResult = this.strInsert(addVisCfgResult, visFilterIdx + 9, filters);\n\n        let queryAddIndex = addVisFilterResult.indexOf('query:\\'\\'');\n        this.allUrl = this.strInsert(addVisFilterResult, queryAddIndex + 7, 'session_id:' + this.sessId);\n\n    }\n    setUrlByInfi() {\n\n        let uuidLength: number;\n        let uuids: string[];\n        let intervalSec: string;\n        if (this.repeatCount === 300) {\n            intervalSec = '1s';\n        } else {\n            intervalSec = '5s';\n        }\n        if (this.protocol === 'TWAMP') {\n            uuidLength = this.uuidsTwamp.length + 1;\n            uuids = this.uuidsTwamp;\n        } else if (this.protocol === 'ICMP') {\n            uuidLength = this.uuidsIcmp.length + 1;\n            uuids = this.uuidsIcmp;\n        }\n\n        const startTimeparse = Date.parse(this.startTime);\n        const endTimeparse = Date.parse(this.endTime);\n\n        let gIdx = this.kibanaInfo[0].url.indexOf('?_g=()');\n        let addgIdxResult = this.strInsert(this.kibanaInfo[0].url, gIdx + 1, 'embed=true&');\n        let visCfgStr = '';\n        let locx: number;\n        let locy = 0;\n        let count = 0;\n        for (let a = 1; a < uuidLength; a++) {\n            if (a > 1) {\n                visCfgStr += ',';\n            }\n            if (a % 2 == 0) {\n                locx = 24;\n            } else { locx = 0; }\n\n            visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + a + '\\',w:24,x:' + locx + ',y:' + locy + '),id:\\'' + uuids[a - 1] + intervalSec + '\\',panelIndex:\\'' + a + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n            count++;\n            if (count == 2) {\n                locy += 15;\n                count = 0;\n            }\n        }\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 1 + '\\',w:24,x:' + 0 + ',y:' + 0 + '),id:\\'' + this.uuids[a - 1] + '5s' + '\\',panelIndex:\\'' + 1 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\'),';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 2 + '\\',w:24,x:' + 24 + ',y:' + 0 + '),id:\\'609fa4a0-b0e3-11e8-a708-d97c9dcf4dae\\',panelIndex:\\'' + 2 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\'),';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 3 + '\\',w:24,x:' + 0 + ',y:' + 15 + '),id:\\'c91f5a20-b0e3-11e8-a708-d97c9dcf4dae\\',panelIndex:\\'' + 3 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\'),';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 4 + '\\',w:24,x:' + 24 + ',y:' + 15 + '),id:\\'04405be0-b0c6-11e8-a708-d97c9dcf4dae\\',panelIndex:\\'' + 4 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\'),';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 5 + '\\',w:24,x:' + 0 + ',y:' + 30 + '),id:\\'e2164a30-b01a-11e8-a708-d97c9dcf4dae\\',panelIndex:\\'' + 5 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\'),';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 6 + '\\',w:24,x:' + 24 + ',y:' + 30 + '),id:\\'0c9e5d10-b0e3-11e8-a708-d97c9dcf4dae\\',panelIndex:\\'' + 6 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\'),';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 7 + '\\',w:24,x:' + 0 + ',y:' + 45 + '),id:\\'96847240-b0e2-11e8-a708-d97c9dcf4dae\\',panelIndex:\\'' + 7 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n\n        let filters = '(\\'$state\\':(store:appState),meta:(alias:!n,disabled:!f,index:\\'77b1b590-9ac5-11e8-92d3-7f0263a523d8\\',key:start_time,negate:!f,params:(format:epoch_millis,gte:' + startTimeparse + ',lt:' + endTimeparse + '),type:range,value:\\'September%205th%202018,%2011:25:13.333%20to%20September%205th%202018,%2012:05:37.575\\'),range:(start_time:(format:epoch_millis,gte:' + startTimeparse + ',lt:' + endTimeparse + ')))';\n\n        const intervalOps = 'filters:!(),refreshInterval:(\\'$$hashKey\\':\\'object:23596\\',display:Off,pause:!f,section:0,value:0),time:(from:now-15m,mode:quick,to:now)';\n\n        let visIntervalIdx = addgIdxResult.indexOf('e&_g=()');\n        let addVisIntervalResult = this.strInsert(addgIdxResult, visIntervalIdx + 6, intervalOps);\n\n        let visFilterIdx = addVisIntervalResult.indexOf('ilters:!(),fullS');\n        let addVisFilterResult = this.strInsert(addVisIntervalResult, visFilterIdx + 9, filters);\n\n        let visCfgIdx = addVisFilterResult.indexOf('panels:!()');\n        let addVisCfgResult = this.strInsert(addVisFilterResult, visCfgIdx + 9, visCfgStr);\n\n        let queryAddIndex = addVisCfgResult.indexOf('query:\\'\\'');\n        this.allUrl = this.strInsert(addVisCfgResult, queryAddIndex + 7, 'session_id:' + this.sessId);\n\n    }\n    strInsert(str: string, index: number, value: string) {\n        return str.substr(0, index) + value + str.substr(index);\n    }\n\n    private iFrameAddListener() {\n        let that = this;\n        let eventMethod = 'addEventListener';\n        let eventer = window[eventMethod];\n        let messageEvent = eventMethod == 'attachEvent' ? 'onmessage' : 'message';\n\n        // Listen to message from parent (or any other) window\n        eventer(messageEvent, this.pluginNotification);\n\n    }\n\n    private pluginNotification = (e) => {\n        let that = this;\n        if (e.data && !e.data.type) {\n            let func = e.data.split('##')[0];\n            let res = JSON.parse(e.data.split('##')[1]);\n            console.log('func:', func, 'res:', res);\n        }\n        // if (func == \"load\") {\n        //   that.createBaseDashboard()\n        // }\n    };\n\n}","module.exports = \"<div class=\\\"search_view\\\" style=\\\"text-align: center; padding-left: 15px;\\\">\\n        <div style=\\\"display: inline-block;\\\">\\n          <table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"6\\\" class=\\\"search_list\\\">\\n            <tr>\\n              <th style=\\\"width: 100px\\\">\\n                검색 시작시간 :\\n              </th>\\n              <td>\\n                <input type=\\\"datetime-local\\\" [value]=\\\"startTime\\\" (change)=\\\"startTime=$event.target.value\\\" />\\n              </td>\\n            </tr>\\n          </table>\\n        </div>\\n        <div style=\\\"display: inline-block;\\\">\\n          <table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"6\\\" class=\\\"search_list\\\">\\n            <tr>\\n              <th style=\\\"width: 100px\\\">\\n                검색 종료시간 :\\n              </th>\\n              <td>\\n                <input type=\\\"datetime-local\\\" [value]=\\\"endTime\\\" (change)=\\\"endTime=$event.target.value\\\" />\\n              </td>\\n            </tr>\\n          </table>\\n        </div>\\n        <div class=\\\"btn_dialog\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"onTimeSearch()\\\">검색</button>\\n        </div>\\n      </div>\\n      \\n      <span *ngIf=\\\"graphShow\\\">\\n        <iframe id=\\\"multintIframe\\\" *ngIf=\\\"iframeAllUrl\\\" [src]=\\\"iframeAllUrl\\\" frameborder=\\\"0\\\" scrolling=\\\"yes\\\" style=\\\"width: 100%; height: 92.5%\\\"></iframe>\\n      </span>\\n      \\n      <div class=\\\"btn_dialog\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"onNoClick()\\\">닫기</button>\\n      </div>\"","module.exports = \"<!-- title -->\\n<div class=\\\"title_area\\\">\\n  <div class=\\\"title\\\">설정</div>\\n</div>\\n<!-- end title -->\\n\\n<!-- search-->\\n<div class=\\\"search_view\\\" style=\\\"padding-left: 67px;\\\">\\n  <form name=\\\"form1\\\" method=\\\"post\\\" action=\\\"\\\" novalidate [formGroup]=\\\"KibanaInputForm\\\" (ngSubmit)=\\\"saveInfo()\\\">\\n    <table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"0\\\" style=\\\"width: 100%;\\\" class=\\\"search_list\\\">\\n      <tr>\\n        <!-- <th>Url</th>\\n        <td class=\\\"left\\\" style=\\\"width: 100%\\\">\\n          <input type=\\\"url\\\" name=\\\"textfield\\\" style=\\\"width: 100%\\\" [(ngModel)]=\\\"inputUrl\\\" formControlName=\\\"url\\\" required>\\n        </td> -->\\n        <th width=\\\"65\\\" style=\\\"width: 189px;\\\">ElasticSearch & Kibana Host</th>\\n        <td class=\\\"left\\\" style=\\\"width: 32%\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"kibanaInfo.host\\\" formControlName=\\\"ekhost\\\" required>\\n        </td>\\n        <th width=\\\"80\\\" style=\\\"width: 119px;\\\">ElasticSearch Port</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" style=\\\"width: 80px;\\\" [(ngModel)]=\\\"kibanaInfo.eport\\\" formControlName=\\\"eport\\\"\\n            required>\\n        </td>\\n      </tr>\\n      <tr>\\n        <th>Kibana Port</th>\\n        <td class=\\\"left\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" style=\\\"width: 80px;\\\" [(ngModel)]=\\\"kibanaInfo.kport\\\" formControlName=\\\"kport\\\"\\n            required>\\n        </td>\\n        <!-- <th style=\\\"background: white\\\">\\n        </th> -->\\n      </tr>\\n    </table>\\n    <span style=\\\"position: relative; left: 22%;\\\">\\n      <button type=\\\"submit\\\" class=\\\"btn\\\" mat-raised-button [ngClass]=\\\"{'btn-primary' : KibanaInputForm.valid, 'disabled' : !KibanaInputForm.valid || btnDisabled}\\\"\\n        [disabled]=\\\"!KibanaInputForm.valid || btnDisabled\\\">저장</button>\\n      <button type=\\\"button\\\" class=\\\"btn btn-basics\\\" mat-raised-button [ngClass]=\\\"{'disabled' : btnDisabled}\\\" [disabled]=\\\"btnDisabled\\\"\\n        (click)=\\\"addDashboard()\\\">Dashboard 생성</button>\\n      <button type=\\\"button\\\" class=\\\"btn btn-basics\\\" mat-raised-button [ngClass]=\\\"{'disabled' : btnDisabled}\\\" [disabled]=\\\"btnDisabled\\\"\\n        (click)=\\\"addVisualization()\\\">Visualization 생성</button>\\n    </span>\\n  </form>\\n  <span style=\\\"font-size: 14px; padding-left: 45%; font-weight: 600;\\\" *ngIf=\\\"adding\\\">\\n    생성중...\\n  </span>\\n</div>\\n\\n<span *ngIf=\\\"listIsExist; else empty\\\">\\n  <table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"list_tl\\\">\\n    <tr>\\n      <th width=\\\"33%\\\">ElasticSearch & Kibana Host</th>\\n      <th>ElasticSearch Port</th>\\n      <th>Kibana Port</th>\\n    </tr>\\n    <tr *ngFor=\\\"let data of kibanaList\\\">\\n      <td>{{data.host}}</td>\\n      <td>{{data.eport}}</td>\\n      <td>{{data.kport}}</td>\\n    </tr>\\n  </table>\\n</span>\\n<!-- end search -->\\n<!-- 품질측정 -->\\n<!-- <span *ngIf=\\\"listIsExist; else empty\\\">\\n\\n  <table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"list_tl\\\">\\n    <tr>\\n      <th>URL</th>\\n    </tr>\\n    <tr *ngFor=\\\"let data of kibanaList\\\">\\n      <td class=\\\"cont\\\">{{data.url}}</td>\\n    </tr>\\n  </table>\\n\\n</span> -->\\n<ng-template #empty>\\n  <div class=\\\"div_quality\\\">\\n    <div class=\\\"qual_text\\\">Kibana 정보를 추가해 주세요.</div>\\n  </div>\\n</ng-template>\\n\"","import { Component, OnInit, OnDestroy, ComponentRef } from '@angular/core';\nimport { AddKibanaInfo, KibanaInfo } from '../../_models/KibanaInfo';\nimport { WebSocketMsg } from '../../_models/WebSocketMsg';\nimport { ConfigService } from '../../_services/config/config.service';\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\nimport { AppConfig } from '../../_services/config/AppConfig';\nimport * as Stomp from 'stompjs';\nimport * as SockJS from 'sockjs-client';\n\nimport { v4 as uuid } from 'uuid';\n\n@Component({\n    templateUrl: 'config.component.html'\n})\nexport class ConfigComponent implements OnDestroy {\n\n    private serverUrl = AppConfig.settings.apiServer.url + '/socket';\n    private stompClient;\n\n    public kibanaInfo: AddKibanaInfo = new AddKibanaInfo();\n    public kibanaList: KibanaInfo = new KibanaInfo();\n    public listIsExist = false;\n\n    private readonly ERROR_NOT_FOUND = 'Not found pageable By Kibana Info';\n    private readonly ERROR_NULL_POINTER = '반환된 값이 Null 입니다';\n    private readonly ERROR_INTERRUPTED = 'InterruptedException';\n    public KibanaInputForm: FormGroup;\n    private formEkhost: FormControl;\n    private formEport: FormControl;\n    private formKport: FormControl;\n\n    private connuuid = uuid();\n\n    private alive = true;\n    public adding = false;\n    public btnDisabled = false;\n    private message: WebSocketMsg = new WebSocketMsg();\n\n    constructor(\n        private configService: ConfigService\n    ) {\n        this.initializeWebSocketConnection();\n        this.validation();\n        this.loadKibanaUrl();\n    }\n\n    initializeWebSocketConnection() {\n        let ws = new SockJS(this.serverUrl);\n        this.stompClient = Stomp.over(ws);\n        let that = this;\n        this.message.id = this.connuuid;\n        this.stompClient.connect({}, function (frame) {\n            that.stompClient.subscribe('/process/serverrefused', (message) => {\n                if (message.body) {\n                    if (JSON.parse(message.body)['id'] === that.connuuid) {\n                        alert('Elastic Search Server와 연결이 거부되었습니다.');\n                    } else {\n                        alert('다른 사용자가 ' + JSON.parse(message.body)['type'] + ' 생성을 시도하였습니다.');\n                    }\n                    that.adding = false;\n                    that.btnDisabled = false;\n                    console.log(message);\n                }\n            });\n\n            that.stompClient.subscribe('/process/success', (message) => {\n                if (message.body) {\n                    if (JSON.parse(message.body)['id'] === that.connuuid) {\n                        alert('정상적으로 생성되었습니다.');\n                    } else {\n                        alert('다른 사용자가 ' + JSON.parse(message.body)['type'] + '를 생성하였습니다.');\n                    }\n                    that.adding = false;\n                    that.btnDisabled = false;\n                    console.log(message);\n                }\n            });\n        });\n    }\n\n    ngOnDestroy() {\n        this.alive = false;\n        this.stompClient.disconnect();\n    }\n\n    private loadKibanaUrl(): void {\n        const that = this;\n        this.configService.getKibanaListAll().takeWhile(() => this.alive).subscribe(\n            responseData => {\n                that.listIsExist = true;\n                that.kibanaList = responseData['result']['content'];\n            },\n            error => {\n                console.log(error['error'].message);\n                if (error['status'] === 504) {\n                    alert(error['status'] + ' : ' + error['statusText']);\n                } else if (error['error'].result.indexOf(that.ERROR_NOT_FOUND) != -1) {\n                    that.listIsExist = false;\n                }\n            }\n        )\n    }\n\n    public saveInfo(): void {\n        const that = this;\n        this.configService.saveKibanaInfoAndDashboard(this.kibanaInfo).takeWhile(() => this.alive).subscribe(\n            responseData => {\n                if (responseData['type'] === 1) {\n                    alert(responseData['message']);\n                    that.loadKibanaUrl();\n                    console.log(responseData);\n                }\n            },\n            error => {\n                alert(error['error']['message']);\n                console.log(error);\n            }\n        )\n    }\n\n    public addDashboard(): void {\n        const that = this;\n        this.configService.addKibanaDashboard(this.message).takeWhile(() => this.alive).subscribe(\n            responseData => {\n                console.log(responseData);\n            },\n            error => {\n                console.log(error);\n                if (error['error'].message.indexOf(that.ERROR_NULL_POINTER) != -1) {\n                    alert(error['error'].result);\n                } else if (error['error'].result.indexOf(that.ERROR_INTERRUPTED) != -1) {\n                    alert(error['error'].message);\n                }\n            }\n            \n        )\n        this.adding = true;\n        this.btnDisabled = true;\n    }\n\n    public addVisualization(): void {\n        const that = this;\n        this.configService.addKibanaVisualization(this.message).takeWhile(() => this.alive).subscribe(\n            responseData => {\n                console.log(responseData);\n            },\n            error => {\n                console.log(error);\n                if (error['error'].message.indexOf(that.ERROR_NULL_POINTER) != -1) {\n                    alert(error['error'].result);\n                } else if (error['error'].result.indexOf(that.ERROR_INTERRUPTED) != -1) {\n                    alert(error['error'].message);\n                }\n            }\n        )\n        this.adding = true;\n        this.btnDisabled = true;\n    }\n    \n    // private startAddTimer(ms: number) {\n    //     this.addtime = 0;\n    //     this.interval = setInterval(() => {\n    //         this.addtime++;\n    //         switch (this.addtime % 4) {\n    //             case 1: {\n    //                 this.comma = '.';\n    //             }\n    //             case 2: {\n    //                 this.comma = '..';\n    //             }\n    //             case 3: {\n    //                 this.comma = '...';\n    //             }\n    //             case 0: {\n    //                 this.comma = '....';\n    //             }\n    //         }\n    //     }, ms)\n    // }\n\n    // private pauseAddTimer() {\n    //     clearInterval(this.interval);\n    // }\n\n    private validation(): void {\n        this.formEkhost = new FormControl('', Validators.compose([\n            Validators.required\n            ,Validators.pattern('^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?|^((http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$')\n        ]));\n        this.formEport = new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.min(1024),\n            Validators.max(49151)\n        ]));\n        this.formKport = new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.min(1024),\n            Validators.max(49151)\n        ]));\n\n        this.KibanaInputForm = new FormGroup({\n            ekhost: this.formEkhost,\n            eport: this.formEport,\n            kport: this.formKport\n        });\n    }\n}\n","module.exports = \"<!-- title -->\\n<div class=\\\"title_area\\\">\\n  <div class=\\\"title\\\">대시보드</div>\\n</div>\\n<!-- end title -->\\n\\n<!-- search-->\\n<div class=\\\"div_map\\\">\\n  <agm-map #gm class=\\\"agm_map\\\" [latitude]=\\\"lat\\\" [longitude]=\\\"lng\\\" [zoom]=\\\"zoom\\\" [disableDefaultUI]=\\\"false\\\"\\n  [zoomControl]=\\\"false\\\" [styles]=\\\"mapstyle\\\">\\n\\n  <agm-marker *ngFor=\\\"let m of markers; let i = index\\\" [latitude]=\\\"m.lat\\\"\\n      [longitude]=\\\"m.lng\\\" [label]=\\\"m.label\\\" [iconUrl]=\\\"m?.icon\\\" [markerDraggable]=\\\"m.draggable\\\"\\n      (mouseOver)=\\\"markerMouseOver(infoWindow, gm, m)\\\" (mouseOut)=\\\"markerMouseout(infoWindow)\\\">\\n\\n      <agm-info-window [disableAutoPan]=\\\"false\\\" #infoWindow>\\n        <div class=\\\"info_window\\\">\\n          <!-- <div>\\n            <span class=\\\"info_name\\\">장소  :  </span>\\n            <span class=\\\"info_Boldvalue\\\"> {{m.locale}}</span>\\n          </div>\\n          <br> -->\\n          <div style=\\\"padding: 10px\\\">\\n            <span class=\\\"info_name\\\">Reflector IP : </span>\\n            <span class=\\\"info_value\\\"> {{m.ip}}</span>\\n          </div>\\n          <div style=\\\"padding: 10px\\\">\\n            <span class=\\\"info_name\\\">Address : </span>\\n            <span class=\\\"info_value\\\"> {{m.address}}</span>\\n          </div>\\n        </div>\\n      </agm-info-window>\\n\\n    </agm-marker>\\n\\n</agm-map>\\n</div>\\n<!-- end search -->\\n<ngx-spinner bdColor=\\\"rgba(51, 51, 51, 0.8)\\\" size=\\\"large\\\" color=\\\"#fff\\\" type=\\\"ball-clip-rotate\\\"></ngx-spinner>\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { MatDialog } from '@angular/material';\n\nimport { AgmInfoWindow, MouseEvent, MapTypeStyle } from '@agm/core';\n\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ReflectorService } from 'src/app/_services/reflector/reflector.service';\n\nimport { Reflector } from '../../_models/Reflector';\n\n\ninterface marker {\n    lat: number;\n    lng: number;\n    label?: Object | string;\n    draggable: boolean;\n    locale?: string;\n    address?: string;\n    condition?: string;\n    icon?: string;\n}\n\n\n@Component({\n    templateUrl: 'dashboard.component.html'\n})\nexport class DashboardComponent implements OnInit, OnDestroy {\n\n    public zoom = 8;\n    public lat = 36.409522;\n    public lng = 127.831503;\n    public clickedmarker: marker;\n\n    public ReflectorData: Reflector[];\n\n    /**\n     * 현재 Map에 표시되는 Markers Array\n     */\n    public markers: any[] = [];\n\n    public mapstyle: MapTypeStyle[] = [\n        {\n            elementType: 'labels',\n            featureType: 'road',\n            stylers: [\n                { visibility: 'off' }\n            ]\n        }\n    ];\n\n\n    constructor(\n        private dialog: MatDialog,\n        private spinner: NgxSpinnerService,\n        private reflectorService: ReflectorService\n    ) {\n        this.requestReflectorAllList();\n    }\n    ngOnInit() {\n        this.spinner.show();\n \n        setTimeout(() => {\n            /** spinner ends after 5 seconds */\n            this.spinner.hide();\n        }, 1000);\n    }\n    ngOnDestroy() {\n    }\n\n\n\n    /**\n     * Marker Mouse Over Event\n     * @param infoWindow\n     *                  AgmInfoWindow\n     * @param gm\n     *                  Agm Map\n     * @param m\n     *                  Marker Object\n     */\n    public markerMouseOver(infoWindow: AgmInfoWindow, gm: any, m: marker): void {\n        console.log('Marker Mouse Over');\n        // if (gm.lastOpen != null) {\n        //     gm.lastOpen.close();\n        // }\n        this.clickedmarker = m;\n        gm.lastOpen = infoWindow;\n        infoWindow.open();\n    }\n\n    /**\n     * Marker Mouse Out Event\n     * @param infoWindow\n     *                  AgmInfoWindow\n     */\n    public markerMouseout(infoWindow: AgmInfoWindow): void {\n        console.log('Marker Mouse Out');\n        infoWindow.close();\n    }\n\n    private requestReflectorAllList(): void {\n        const that = this;\n        this.reflectorService.getReflectorListPageable(0, 1000000000, '').subscribe(\n            response => {\n                console.log(response['message']);\n                that.ReflectorData = response['result']['content'];\n                that.makeMarker(that.ReflectorData);\n            }, error => {\n                alert('Reflector Data를 받아오는중 오류 발생');\n            }\n        )\n    }\n\n    private makeMarker(reflectorData: Reflector[]): void {\n        for (let a = 0; a < reflectorData.length; a++) {\n            const tmpMk = {};\n            tmpMk['label'] = reflectorData[a].reflectorId + '';\n            tmpMk['lat'] = reflectorData[a].lat;\n            tmpMk['lng'] = reflectorData[a].lng;\n            tmpMk['address'] = reflectorData[a].address;\n            tmpMk['draggable'] = false;\n            tmpMk['ip'] = reflectorData[a].reflectorIp;\n            tmpMk['port'] = reflectorData[a].port;\n            if (reflectorData[a].address !== 'test') {\n                this.markers.push(tmpMk);\n            }\n        }\n    }\n}\n","module.exports = \"<div>error : {{routeParams?.message}}</div>\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n    templateUrl: 'error.component.html'\n})\nexport class ErrorComponent implements OnInit {\n\n    routeParams;\n\n    constructor(\n      private activatedRoute: ActivatedRoute,\n    ) { }\n\n    ngOnInit() {\n      this.routeParams = this.activatedRoute.snapshot.queryParams;\n    }\n\n}\n","export * from './dashboard/dashboard.component';\nexport * from './quality-measurement/quality-measurement.component';\nexport * from './quality-history/quality-history.component';\nexport * from './analysis-bigdata/analysis-bigdata.component';\nexport * from './obstacle/obstacle-history.component';\nexport * from './reflector-mgmt/reflector-mgmt.component';\nexport * from './config/config.component';\nexport * from './login/login.component';\nexport * from './error/error.component';\n","module.exports = \"<div class=\\\"container_login\\\">\\n  <form name=\\\"form1\\\" method=\\\"post\\\" action=\\\"\\\" novalidate [formGroup]=\\\"LoginForm\\\" (ngSubmit)=\\\"login()\\\">\\n    <div id=\\\"contents_login\\\">\\n\\n      <div class=\\\"login_area\\\">\\n        <ul>\\n          <li class=\\\"l_01\\\">LOGIN</li>\\n          <li class=\\\"l_02\\\">환영합니다.</li>\\n          <li><input name=\\\"j_username\\\" class=\\\"input_id\\\" type=\\\"text\\\" placeholder=\\\"User ID\\\" [(ngModel)]=\\\"id\\\" formControlName=\\\"id\\\" required></li>\\n          <li><input name=\\\"j_password\\\" class=\\\"input_pw\\\" type=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"password\\\" formControlName=\\\"password\\\" required></li>\\n          <li><button type=\\\"submit\\\" class=\\\"btn\\\" mat-raised-button [ngClass]=\\\"{'btn_login' : LoginForm.valid, 'btn_login_disabled' : !LoginForm.valid}\\\" [disabled]=\\\"!LoginForm.valid\\\">LOGIN</button></li>\\n          <!-- <li class=\\\"login_check\\\">\\n            <span><input type=\\\"checkbox\\\"> 아이디 저장</span>\\n          </li> -->\\n        </ul>\\n      </div>\\n\\n      <div class=\\\"l_copy_area\\\">\\n        Copyright(c) YMTECH Corporation. All rights reserved.\\n      </div>\\n\\n    </div>\\n    <!--end contents Area -->\\n\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { AppConfig } from '../../_services/config/AppConfig';\n\nimport { AuthenticationService } from '../../_services/auth/auth.service';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n\n@Component({\n    templateUrl: 'login.component.html'\n})\nexport class LoginComponent implements OnInit {\n\n    private returnUrl: string;\n\n    public id: string;\n    public password: string;\n\n    public LoginForm: FormGroup;\n    public formId: FormControl;\n    public formPassword: FormControl;\n\n    constructor(\n        private activatedRoute: ActivatedRoute,\n        private router: Router,\n        private authenticationService: AuthenticationService\n    ) {\n        this.validation();\n    }\n\n    ngOnInit() {\n        this.authenticationService.logout();\n\n        this.returnUrl = this.activatedRoute.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n    login() {\n        if (this.id === AppConfig.settings.login.id && this.password === AppConfig.settings.login.password) {\n            localStorage.setItem('currentUser', AppConfig.settings.login.id);\n            this.router.navigate([this.returnUrl]);\n        } else {\n            alert('ID 또는 Password가 다릅니다.');\n        }\n    }\n\n\n    validation(): void {\n        this.formId = new FormControl('', Validators.compose([\n            Validators.required\n        ]))\n\n        this.formPassword = new FormControl('', Validators.compose([\n            Validators.required\n        ]))\n\n        this.LoginForm = new FormGroup({\n            id: this.formId,\n            password: this.formPassword\n        });\n    }\n}","module.exports = \"<!-- title -->\\n<div class=\\\"title_area\\\">\\n  <div class=\\\"title\\\">장애 이력</div>\\n</div>\\n<!-- end title -->\\n\\n<!-- search-->\\n<div class=\\\"search_view\\\">\\n  <form name=\\\"form1\\\" method=\\\"post\\\" action=\\\"\\\" novalidate [formGroup]=\\\"lesionHistoryForm\\\" (ngSubmit)=\\\"onSearchClick()\\\">\\n    <table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"6\\\" class=\\\"search_list\\\">\\n      <tr>\\n        <th width=\\\"65\\\">Sender IP</th>\\n        <td class=\\\"left\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"searchSenderIp\\\" formControlName=\\\"senderIp\\\">\\n        </td>\\n        <th width=\\\"80\\\">Reflector IP</th>\\n        <td colspan=\\\"2\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"searchReflectorIp\\\" formControlName=\\\"reflectorIp\\\">\\n        </td>\\n        <td>\\n          <button type=\\\"submit\\\" class=\\\"btn\\\" mat-raised-button [ngClass]=\\\"{'btn-primary' : lesionHistoryForm.valid, 'disabled' : !lesionHistoryForm.valid}\\\"\\n            [disabled]=\\\"!lesionHistoryForm.valid\\\">검색</button>\\n        </td>\\n        <td *ngIf=\\\"isSearch\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" mat-raised-button (click)=\\\"onAllListClick()\\\">전체 목록 보기</button>\\n        </td>\\n      </tr>\\n    </table>\\n  </form>\\n</div>\\n<!-- end search -->\\n\\n<span *ngIf=\\\"listIsExist\\\">\\n  <!-- table -->\\n  <div class=\\\"table_header\\\">\\n    <div class=\\\"th_page\\\">\\n      <b>총\\n        <span>{{count}}</span> 건</b> [{{pg}}/{{allpage}}페이지]</div>\\n  </div>\\n\\n  <table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"list_tl\\\">\\n    <tr>\\n      <th>측정시작시간</th>\\n      <th>측정완료시간</th>\\n      <th>Sender IP</th>\\n      <th>Reflector IP</th>\\n      <th style=\\\"color:red\\\">장애 코드</th>\\n    </tr>\\n    <tr *ngFor=\\\"let data of lesionHistoryData\\\">\\n      <!-- <td>{{data.startTime.replace('.0', '')}}</td> -->\\n      <td>{{setTimezone(data.startTime, \\\"YYYY-MM-DDTHH:mm:ss\\\")}}</td>\\n      <td>{{setTimezone(data.completeTime, \\\"YYYY-MM-DDTHH:mm:ss\\\")}}</td>\\n      <td>{{data.senderIp}}</td>\\n      <td>{{data.reflectorIp}}</td>\\n      <td style=\\\"color:red\\\">{{data.lesionCode}}</td>\\n    </tr>\\n  </table>\\n\\n  <!-- end table -->\\n\\n  <!-- pageing -->\\n  <div class=\\\"pagin_area\\\">\\n    <div class=\\\"paging\\\">\\n      <span *ngIf=\\\"pg > block && pg != 1\\\">\\n        <a (click)=\\\"pageMove(0)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_first.png\\\" border=\\\"0\\\" align=\\\"absmiddle\\\" alt=\\\"back\\\">\\n        </a>\\n        <a (click)=\\\"pageMove(pg - 2)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_prev.png\\\" border=\\\"0\\\" alt=\\\"back\\\">\\n        </a>\\n      </span>\\n      <span *ngFor=\\\"let index of paginationIndex\\\">\\n        <span *ngIf=\\\"pg == index; else notvalid\\\">\\n          <span (click)=\\\"pageMove(index - 1)\\\" class=\\\"r\\\">{{index}}</span>\\n        </span>\\n        <ng-template #notvalid>\\n          <span style=\\\"cursor:pointer;\\\" *ngIf=\\\"pg >= index || index <= allpage\\\">\\n            <a (click)=\\\"pageMove(index - 1)\\\">{{index}}</a>\\n          </span>\\n        </ng-template>\\n      </span>\\n      <span *ngIf=\\\"endpage < allpage\\\">\\n        <a (click)=\\\"pageMove(pg)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_next.png\\\" border=\\\"0\\\" alt=\\\"next\\\">\\n        </a>\\n        <a (click)=\\\"pageMove(allpage - 1)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_last.png\\\" border=\\\"0\\\" alt=\\\"next\\\">\\n        </a>\\n      </span>\\n    </div>\\n  </div>\\n  <!--end pageing-->\\n</span>\\n<span *ngIf=\\\"!listIsExist && !isSearch\\\">\\n  <div class=\\\"div_quality\\\">\\n    <div class=\\\"qual_text\\\">품질 측정을 진행해 주세요.</div>\\n  </div>\\n</span>\\n\\n<span *ngIf=\\\"!listIsExist && isSearch\\\">\\n  <div class=\\\"div_quality\\\">\\n    <div class=\\\"qual_text\\\">검색 조건에 해당하는 값이 없습니다.</div>\\n  </div>\\n</span>\\n\\n<!-- 그래프 -->\\n<!-- <div class=\\\"div_quality\\\">\\n  <p>\\n    <img src=\\\"app/_views/_images/img_sample.gif\\\" border=\\\"0\\\">\\n  </p>\\n</div> -->\\n\\n<ngx-spinner bdColor=\\\"rgba(51, 51, 51, 0.8)\\\" size=\\\"large\\\" color=\\\"#fff\\\" type=\\\"ball-clip-rotate\\\"></ngx-spinner>\"","import { Component, Inject, OnInit, OnDestroy, ComponentRef } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { Reflector } from '../../_models/Reflector';\nimport { Protocol } from '../../_models/Dashboard';\nimport { AppConfig } from '../../_services/config/AppConfig';\nimport { ReflectorService } from '../../_services/reflector/reflector.service';\nimport { MessageService } from '../../_services/Message/message.service';\nimport { ErrorService } from '../../_services/error/error.service';\nimport { GeocodeService } from 'src/app/_services/geocode/geocode.service';\nimport { LesionHistoryService } from 'src/app/_services/lesionHistory/lesion-history.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\nimport * as _moment from 'moment';\nconst moment = _moment;\n\n@Component({\n    templateUrl: 'obstacle-history.component.html'\n})\nexport class ObstacleHistoryComponent implements OnInit, OnDestroy {\n\n    subscription: Subscription;\n    alive = true;\n\n    lesionHistoryData: any;\n    count: any;\n\n    sort = 'lhId,desc';\n    size = AppConfig.settings.pagination.size;\n    pg: number; // 현재 페이지\n    block = AppConfig.settings.pagination.block; // 하단 페이지 넘버 개수\n\n    allpage: number;      // 모든 페이지 수\n    startpage: number;    // 첫 페이지\n    endpage: number;      // 마지막 페이지\n\n    paginationIndex: any;\n\n    ERROR_NOT_FOUND = 'Not found pageable By Quality History';\n    RESULT_OK = 1;\n\n    lesionHistoryForm: FormGroup;\n    formSenderIp: FormControl;\n    formReflectorIp: FormControl;\n\n    searchSenderIp: string = '';\n    searchReflectorIp: string = '';\n\n    listIsExist = false;\n    isSearch = false;\n\n    constructor(\n        private dialog: MatDialog,\n        private lesionHistoryService: LesionHistoryService,\n        private messageService: MessageService,\n        private errorService: ErrorService,\n        private spinner: NgxSpinnerService\n    ) {\n        this.getGlobalMessage();\n        this.validation();\n        this.pageMove(0);\n    }\n\n    ngOnInit() {\n\n    }\n\n    ngOnDestroy() {\n        this.alive = false;\n    }\n\n    getGlobalMessage(): void {\n        const that = this;\n        this.subscription = this.messageService\n            .getMessage().takeWhile(() => this.alive)\n            .subscribe(message => {\n                alert(message);\n                that.isSearch = false;\n            });\n    }\n\n    // private openQualityHistoryGraphDialog(sessId: number, repeatCount: number, startTime: string, endTime: string, meResult: string, protocol: string): void {\n    //     const dialogRef = this.dialog.open(QualityGraphDialog, {\n    //         height: '80%',\n    //         width: '80%',\n    //         minWidth: '600px',\n    //         data : {\n    //             'sessId' : sessId,\n    //             'repeatCount' : repeatCount,\n    //             'startTime' : startTime,\n    //             'endTime' : endTime,\n    //             'measureresult' : meResult,\n    //             'protocol' : protocol\n    //         },\n    //         autoFocus: true\n    //     });\n    //     // dialogRef.\n    //     dialogRef.afterClosed().subscribe(result => {\n    //         console.log('The dialog was cloased');\n    //     });\n    // }\n\n    public onSearchClick(): void {\n        this.isSearch = true;\n        this.getSearchList(0);\n    }\n\n    private onAllListClick(): void {\n        this.isSearch = false;\n        this.pageMove(0);\n    }\n    private pageMove(page: number): void {\n        this.spinner.show();\n        if (this.isSearch) {\n            this.getSearchList(page);\n        } else {\n            const that = this;\n            this.lesionHistoryService.getLesionHistoryListPageable(page, that.size, that.sort).takeWhile(() => this.alive).subscribe(\n                result => {\n                    that.isSearch = false;\n                    that.listIsExist = true;\n                    that.setPagingInfo(result, page);\n                    that.spinner.hide();\n                },\n                error => {\n                    that.judgeGetListHttpError(error);\n                    that.spinner.hide();\n                }\n            );\n        }\n    }\n\n    private getSearchList(page: number): void {\n        this.spinner.show();\n        const that = this;\n        this.lesionHistoryService.getLesionHistoryListPageableSearch(page, this.size, this.sort, this.searchSenderIp, this.searchReflectorIp).takeWhile(() => this.alive).subscribe(\n            result => {\n                that.isSearch = true;\n                that.listIsExist = true;\n                that.setPagingInfo(result, page);\n                that.spinner.hide();\n            },\n            error => {\n                that.isSearch = true;\n                that.listIsExist = false;\n                that.spinner.hide();\n            }\n        )\n    }\n\n    private setPagingInfo(result: Object, page: number) {\n        const responseData: Object = result;\n        console.log(responseData['message']);\n        this.lesionHistoryData = responseData['result']['content'];\n        this.count = responseData['result']['totalElements'];\n        this.allpage = Math.ceil(this.count / this.size);\n        this.pg = page + 1;\n        this.startpage = (Math.floor((this.pg - 1) / this.block) * this.block) + 1;\n        this.endpage = (Math.floor((this.pg - 1) / this.block) * this.block) + this.block;\n        this.paginationIndex = Array.from(Array(this.endpage - this.startpage + 1), (x, i) => i + this.startpage);\n    }\n\n    private validation(): void {\n        this.formSenderIp = new FormControl('', Validators.compose([\n            Validators.pattern('^$|^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n        ]));\n        this.formReflectorIp = new FormControl('', Validators.compose([\n            Validators.pattern('^$|^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n        ]));\n        this.lesionHistoryForm = new FormGroup({\n            senderIp: this.formSenderIp,\n            reflectorIp: this.formReflectorIp\n        });\n    }\n\n    private judgeGetListHttpError(error: any): void {\n        console.log(error);\n        if (error['status'] === 504) {\n            alert(error['status'] + ' : ' + error['statusText']);\n        } else if (error['error'].result.indexOf(this.ERROR_NOT_FOUND) != -1) {\n            this.listIsExist = false;\n        } else {\n            this.errorService.showAllListHttpError(error);\n        }\n    }\n\n    public setTimezone(time: string, format: string): string {\n        return moment(time, format).add(0, 'hours').toISOString(true).split('.')[0].replace('T', ' ');\n    }\n}","module.exports = \"<div class=\\\"search_view\\\" style=\\\"text-align: center; padding-left: 15px;\\\">\\n  <div style=\\\"display: inline-block;\\\">\\n    <table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"6\\\" class=\\\"search_list\\\">\\n      <tr>\\n        <th style=\\\"width: 100px\\\">\\n          검색 시작시간 :\\n        </th>\\n        <td>\\n          <input type=\\\"datetime-local\\\" [value]=\\\"startTime\\\" (change)=\\\"startTime=$event.target.value\\\" />\\n        </td>\\n      </tr>\\n    </table>\\n  </div>\\n  <div style=\\\"display: inline-block;\\\">\\n    <table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"6\\\" class=\\\"search_list\\\">\\n      <tr>\\n        <th style=\\\"width: 100px\\\">\\n          검색 종료시간 :\\n        </th>\\n        <td>\\n          <input type=\\\"datetime-local\\\" [value]=\\\"endTime\\\" (change)=\\\"endTime=$event.target.value\\\" />\\n        </td>\\n      </tr>\\n    </table>\\n  </div>\\n  <div class=\\\"btn_dialog\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"onTimeSearch()\\\">검색</button>\\n  </div>\\n</div>\\n\\n<span *ngIf=\\\"graphShow\\\">\\n  <iframe id=\\\"multintIframe\\\" *ngIf=\\\"iframeAllUrl\\\" [src]=\\\"iframeAllUrl\\\" frameborder=\\\"0\\\" scrolling=\\\"yes\\\" style=\\\"width: 100%; height: 92.5%\\\"></iframe>\\n</span>\\n\\n<div class=\\\"btn_dialog\\\">\\n  <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"onNoClick()\\\">닫기</button>\\n</div>\"","module.exports = \"<!-- title -->\\n<div class=\\\"title_area\\\">\\n  <div class=\\\"title\\\">품질이력</div>\\n</div>\\n<!-- end title -->\\n\\n<!-- search-->\\n<div class=\\\"search_view\\\">\\n  <form name=\\\"form1\\\" method=\\\"post\\\" action=\\\"\\\" novalidate [formGroup]=\\\"qualityHistoryForm\\\" (ngSubmit)=\\\"onSearchClick()\\\">\\n    <table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"6\\\" class=\\\"search_list\\\">\\n      <tr>\\n        <th width=\\\"65\\\">Sender IP</th>\\n        <td class=\\\"left\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"searchSenderIp\\\" formControlName=\\\"senderIp\\\">\\n        </td>\\n        <th width=\\\"80\\\">Reflector IP</th>\\n        <td colspan=\\\"2\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"searchReflectorIp\\\" formControlName=\\\"reflectorIp\\\">\\n        </td>\\n        <td>\\n          <button type=\\\"submit\\\" class=\\\"btn\\\" mat-raised-button [ngClass]=\\\"{'btn-primary' : qualityHistoryForm.valid, 'disabled' : !qualityHistoryForm.valid}\\\"\\n            [disabled]=\\\"!qualityHistoryForm.valid\\\">검색</button>\\n        </td>\\n        <td *ngIf=\\\"isSearch\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" mat-raised-button (click)=\\\"onAllListClick()\\\">전체 목록 보기</button>\\n        </td>\\n      </tr>\\n    </table>\\n  </form>\\n</div>\\n<!-- end search -->\\n\\n<span *ngIf=\\\"listIsExist\\\">\\n  <!-- table -->\\n  <div class=\\\"table_header\\\">\\n    <div class=\\\"th_page\\\">\\n      <b>총\\n        <span>{{count}}</span> 건</b> [{{pg}}/{{allpage}}페이지]</div>\\n  </div>\\n\\n  <table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"list_tl\\\">\\n    <tr>\\n      <th width=\\\"10%\\\">측정시작시간</th>\\n      <th width=\\\"10%\\\">측정완료시간</th>\\n      <th width=\\\"8%\\\">Sender IP</th>\\n      <th width=\\\"8%\\\">Reflector IP</th>\\n      <th width=\\\"5%\\\">Send Count</th>\\n      <th width=\\\"7%\\\">Repeat Count</th>\\n      <th width=\\\"11%\\\">Sender Port</th>\\n      <th width=\\\"11%\\\">Reflector Port</th>\\n      <th width=\\\"9%\\\">Protocol</th>\\n      <th width=\\\"9%\\\">측정모드</th>\\n      <th width=\\\"7%\\\">측정 결과</th>\\n      <th>비고</th>\\n    </tr>\\n    <tr *ngFor=\\\"let qualityhistory of qualityHistoryData\\\">\\n      <td>{{qualityhistory.startTime}}</td>\\n      <td *ngIf=\\\"qualityhistory.measureResult === '측정중...' || qualityhistory.measureResult === 'measureing...'\\\">측정중...</td>\\n      <td *ngIf=\\\"qualityhistory.measureResult !== '측정중...' && qualityhistory.measureResult !== 'measureing...'\\\">{{qualityhistory.completeTime}}</td>\\n      <td>{{qualityhistory.senderIp}}</td>\\n      <td>{{qualityhistory.reflectorIp}}</td>\\n      <td>{{qualityhistory.sendCount}}</td>\\n      <!-- <td *ngIf=\\\"qualityhistory.repeatCount == -1\\\">무한 반복</td>\\n      <td *ngIf=\\\"qualityhistory.repeatCount != -1\\\">{{qualityhistory.repeatCount}}</td> -->\\n      <td *ngIf=\\\"qualityhistory.repeatCount == 1\\\">1초</td>\\n      <td *ngIf=\\\"qualityhistory.repeatCount == 10\\\">10초</td>\\n      <td *ngIf=\\\"qualityhistory.repeatCount == 60\\\">1분</td>\\n      <td *ngIf=\\\"qualityhistory.repeatCount == 300\\\">5분</td>\\n      <td *ngIf=\\\"qualityhistory.repeatCount == 600\\\">10분</td>\\n      <td *ngIf=\\\"qualityhistory.repeatCount == 3600\\\">1시간</td>\\n      <td *ngIf=\\\"qualityhistory.repeatCount == 7200\\\">2시간</td>\\n      <td *ngIf=\\\"qualityhistory.repeatCount != 1 && qualityhistory.repeatCount != 10 && qualityhistory.repeatCount != 60 && qualityhistory.repeatCount != 300 && qualityhistory.repeatCount != 600 && qualityhistory.repeatCount != 3600 && qualityhistory.repeatCount != 7200\\\">{{qualityhistory.repeatCount}}</td>\\n      <td>{{qualityhistory.senderPort}}</td>\\n      <td *ngIf=\\\"qualityhistory.actualProtocol !== 'ICMP'\\\">{{qualityhistory.reflectorPort}}</td>\\n      <td *ngIf=\\\"qualityhistory.actualProtocol === 'ICMP'\\\"></td>\\n      <td>{{qualityhistory.measureProtocol}}</td>\\n      <td *ngIf=\\\"qualityhistory.measureMode === 'unauthorized'\\\">무인증</td>\\n        <td *ngIf=\\\"qualityhistory.measureMode === 'authorized'\\\">인증</td>\\n        <td *ngIf=\\\"qualityhistory.measureMode === 'encryption'\\\">암호화</td>\\n        <td *ngIf=\\\"qualityhistory.measureMode === ''\\\">.</td>\\n      <td>{{qualityhistory.measureResult}}</td>\\n      <td>\\n        <a type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" (click)=\\\"openQualityHistoryGraphDialog(qualityhistory.sessId, qualityhistory.repeatCount, qualityhistory.startTime, qualityhistory.completeTime, qualityhistory.measureResult, qualityhistory.actualProtocol)\\\">상세</a>\\n      </td>\\n    </tr>\\n  </table>\\n\\n  <!-- end table -->\\n\\n  <!-- pageing -->\\n  <div class=\\\"pagin_area\\\">\\n    <div class=\\\"paging\\\">\\n      <span *ngIf=\\\"pg > block && pg != 1\\\">\\n        <a (click)=\\\"pageMove(0)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_first.png\\\" border=\\\"0\\\" align=\\\"absmiddle\\\" alt=\\\"back\\\">\\n        </a>\\n        <a (click)=\\\"pageMove(pg - 2)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_prev.png\\\" border=\\\"0\\\" alt=\\\"back\\\">\\n        </a>\\n      </span>\\n      <span *ngFor=\\\"let index of paginationIndex\\\">\\n        <span *ngIf=\\\"pg == index; else notvalid\\\">\\n          <span (click)=\\\"pageMove(index - 1)\\\" class=\\\"r\\\">{{index}}</span>\\n        </span>\\n        <ng-template #notvalid>\\n          <span style=\\\"cursor:pointer;\\\" *ngIf=\\\"pg >= index || index <= allpage\\\">\\n            <a (click)=\\\"pageMove(index - 1)\\\">{{index}}</a>\\n          </span>\\n        </ng-template>\\n      </span>\\n      <span *ngIf=\\\"endpage < allpage\\\">\\n        <a (click)=\\\"pageMove(pg)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_next.png\\\" border=\\\"0\\\" alt=\\\"next\\\">\\n        </a>\\n        <a (click)=\\\"pageMove(allpage - 1)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_last.png\\\" border=\\\"0\\\" alt=\\\"next\\\">\\n        </a>\\n      </span>\\n    </div>\\n  </div>\\n  <!--end pageing-->\\n</span>\\n<span *ngIf=\\\"!listIsExist && !isSearch\\\">\\n  <div class=\\\"div_quality\\\">\\n    <div class=\\\"qual_text\\\">품질 측정을 진행해 주세요.</div>\\n  </div>\\n</span>\\n\\n<span *ngIf=\\\"!listIsExist && isSearch\\\">\\n  <div class=\\\"div_quality\\\">\\n    <div class=\\\"qual_text\\\">검색 조건에 해당하는 값이 없습니다.</div>\\n  </div>\\n</span>\\n\\n<!-- 그래프 -->\\n<!-- <div class=\\\"div_quality\\\">\\n  <p>\\n    <img src=\\\"app/_views/_images/img_sample.gif\\\" border=\\\"0\\\">\\n  </p>\\n</div> -->\\n<ngx-spinner bdColor=\\\"rgba(51, 51, 51, 0.8)\\\" size=\\\"large\\\" color=\\\"#fff\\\" type=\\\"ball-clip-rotate\\\"></ngx-spinner>\"","import { Component, Inject, OnInit, OnDestroy, ComponentRef } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material';\nimport { Router, NavigationEnd } from '@angular/router';\n\nimport { QualityHistoryService } from '../../_services/qualityHistory/quality-history.service';\nimport { MessageService } from '../../_services/Message/message.service';\nimport { ConfigService } from '../../_services/config/config.service';\nimport { AppConfig } from '../../_services/config/AppConfig';\nimport { ErrorService } from '../../_services/error/error.service';\n\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { SafeResourceUrl, DomSanitizer } from '@angular/platform-browser';\n\nimport { KibanaInfo } from '../../_models/KibanaInfo';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n    templateUrl: 'quality-history.component.html'\n})\nexport class QualityHistoryComponent implements OnDestroy {\n\n    subscription: Subscription;\n    alive = true;\n\n    qualityHistoryData: any;\n    count: any;\n\n    sort = 'sessId,desc';\n    size = AppConfig.settings.pagination.size;\n    pg: number; // 현재 페이지\n    block = AppConfig.settings.pagination.block; // 하단 페이지 넘버 개수\n\n    allpage: number;      // 모든 페이지 수\n    startpage: number;    // 첫 페이지\n    endpage: number;      // 마지막 페이지\n\n    paginationIndex: any;\n\n    ERROR_NOT_FOUND = 'Not found pageable By Quality History';\n    RESULT_OK = 1;\n\n    qualityHistoryForm: FormGroup;\n    formSenderIp: FormControl;\n    formReflectorIp: FormControl;\n\n    searchSenderIp: string = '';\n    searchReflectorIp: string = '';\n\n    listIsExist = false;\n    isSearch = false;\n\n    constructor(\n        private dialog: MatDialog,\n        private qualityHistoryService: QualityHistoryService,\n        private messageService: MessageService,\n        private spinner: NgxSpinnerService,\n        private errorService: ErrorService\n    ) {\n        this.getGlobalMessage();\n        this.validation();\n        this.pageMove(0);\n    }\n\n    ngOnDestroy() {\n        this.alive = false;\n    }\n\n    getGlobalMessage(): void {\n        const that = this;\n        this.subscription = this.messageService\n            .getMessage().takeWhile(() => this.alive)\n            .subscribe(message => {\n                alert(message);\n                that.isSearch = false;\n            });\n    }\n\n    private openQualityHistoryGraphDialog(sessId: number, repeatCount: number, startTime: string, endTime: string, meResult: string, protocol: string): void {\n        const dialogRef = this.dialog.open(QualityGraphDialog, {\n            height: '80%',\n            width: '80%',\n            minWidth: '600px',\n            data : {\n                'sessId' : sessId,\n                'repeatCount' : repeatCount,\n                'startTime' : startTime,\n                'endTime' : endTime,\n                'measureresult' : meResult,\n                'protocol' : protocol\n            },\n            autoFocus: true\n        });\n        // dialogRef.\n        dialogRef.afterClosed().subscribe(result => {\n            console.log('The dialog was cloased');\n        });\n    }\n\n    public onSearchClick(): void {\n        this.isSearch = true;\n        this.getSearchList(0);\n    }\n\n    private onAllListClick(): void {\n        this.isSearch = false;\n        this.pageMove(0);\n    }\n    private pageMove(page: number): void {\n        this.spinner.show();\n        if (this.isSearch) {\n            this.getSearchList(page);\n        } else {\n            const that = this;\n            this.qualityHistoryService.getQualityHistoryListPageable(page, that.size, that.sort).takeWhile(() => this.alive).subscribe(\n                result => {\n                    that.isSearch = false;\n                    that.listIsExist = true;\n                    that.setPagingInfo(result, page);\n                },\n                error => {\n                    that.judgeGetListHttpError(error);\n                    that.spinner.hide();\n                }\n            );\n        }\n    }\n\n    private getSearchList(page: number): void {\n        const that = this;\n        this.qualityHistoryService.getQualityHistoryListPageableSearch(page, this.size, this.sort, this.searchSenderIp, this.searchReflectorIp).takeWhile(() => this.alive).subscribe(\n            result => {\n                that.isSearch = true;\n                that.listIsExist = true;\n                that.setPagingInfo(result, page);\n            },\n            error => {\n                that.isSearch = true;\n                that.listIsExist = false;\n                that.spinner.hide();\n            }\n        )\n    }\n\n    private setPagingInfo(result: Object, page: number) {\n        const responseData: Object = result;\n        console.log(responseData['message']);\n        this.qualityHistoryData = responseData['result']['content'];\n        this.count = responseData['result']['totalElements'];\n        this.allpage = Math.ceil(this.count / this.size);\n        this.pg = page + 1;\n        this.startpage = (Math.floor((this.pg - 1) / this.block) * this.block) + 1;\n        this.endpage = (Math.floor((this.pg - 1) / this.block) * this.block) + this.block;\n        this.paginationIndex = Array.from(Array(this.endpage - this.startpage + 1), (x, i) => i + this.startpage);\n        this.spinner.hide();\n    }\n\n    private validation(): void {\n        this.formSenderIp = new FormControl('', Validators.compose([\n            Validators.pattern('^$|^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n        ]));\n        this.formReflectorIp = new FormControl('', Validators.compose([\n            Validators.pattern('^$|^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n        ]));\n        this.qualityHistoryForm = new FormGroup({\n            senderIp: this.formSenderIp,\n            reflectorIp: this.formReflectorIp\n        });\n    }\n\n    private judgeGetListHttpError(error: any): void {\n        console.log(error);\n        if (error['status'] === 504) {\n            alert(error['status'] + ' : ' + error['statusText']);\n        } else if (error['error'].result.indexOf(this.ERROR_NOT_FOUND) != -1) {\n            this.listIsExist = false;\n        } else {\n            this.errorService.showAllListHttpError(error);\n        }\n    }\n}\n\n@Component({\n    templateUrl: 'quality-graph.dialog.html'\n})\nexport class QualityGraphDialog implements OnDestroy{\n\n    public kibanaInfo: KibanaInfo = new KibanaInfo(0, '');\n\n    private readonly ERROR_NOT_FOUND = 'Not found pageable By Kibana Info';\n\n    private readonly kibanaVersion = AppConfig.settings.kibana.version;\n\n    private alive = true;\n    private sessId: number;\n    public repeatCount: number;\n\n    public startTime: any;\n    public endTime: any;\n    public meResult: string;\n    public protocol: string;\n\n    public graphShow = false;\n    allUrl: string;\n    public timezone = 32400000;\n    // private uuids = [ 'lp_', 'duplicate_packets_', 'ooop_', 'pdv_', 'ipdv_', 'inter_delay_', 'rtt_', 'up_delay_', 'down_delay_', 'ld_', 'ttl_' ]; // TEMP\n    private uuidsTwamp = ['up_lp_', 'down_lp_', 'up_duplicate_packets_', 'down_duplicate_packets_', 'up_ooop_', 'down_ooop_', 'up_pdv_', 'down_pdv_', 'up_ipdv_', 'down_ipdv_', 'inter_delay_', 'rtt_', 'up_delay_', 'down_delay_', 'ttl_']; // TWAMP\n    private uuidsIcmp = [ 'lp_', 'duplicate_packets_', 'ooop_', 'pdv_', 'ipdv_', 'rtt_']; // ICMP\n\n    public iframeAllUrl: SafeResourceUrl;\n\n    constructor(\n        private dialogRef: MatDialogRef<QualityGraphDialog>,\n        @Inject(MAT_DIALOG_DATA) private data: any,\n        private domSanitizer: DomSanitizer,\n        private configService: ConfigService,\n        private qualityHistoryService: QualityHistoryService,\n        private router: Router\n    ) {\n        this.sessId = data.sessId;\n        this.repeatCount = data.repeatCount;\n        this.meResult = data.measureresult;\n        this.protocol = data.protocol;\n        \n        /**\n         * 2018-09-28 수정 전\n         */\n        // if ((this.repeatCount === 3600 || this.repeatCount === 7200) && this.meResult === '측정중...') {\n        //     this.startTime = this.setTime(new Date(parseInt(this.setStartTime(data.startTime.replace(' ', 'T')) + '000')));\n        // } else if ((this.repeatCount === 3600 || this.repeatCount === 7200) && this.meResult !== '측정중...') {\n        //     this.startTime = this.setTime(new Date(parseInt(this.setStartTime(data.startTime.replace(' ', 'T'), data.endTime.replace(' ', 'T')) + '000')));\n        // } else {\n        //     this.startTime = data.startTime.replace(' ', 'T');\n        // }\n\n        // if (((this.repeatCount === 3600 || this.repeatCount === 7200) && this.meResult === '측정중...')) {\n        //     this.endTime = this.setTime();\n        // } else if (this.repeatCount === 600) {\n        //     this.graphShow = true;\n        //     this.endTime = this.setTime();\n        //     this.iFrameAddListener();\n        // } else {\n        //     this.graphShow = true;\n        //     this.endTime = data.endTime.replace(' ', 'T');\n        //     this.iFrameAddListener();\n        // }\n\n        // if ((this.repeatCount === 3600 || this.repeatCount === 7200)) {\n        // } else {\n        //     this.loadKibanaUrl();\n        // }\n\n        /**\n         * 2018-09-28 수정 후\n         */\n        if (this.meResult === \"측정중...\") {\n          this.startTime = this.setTime(new Date(parseInt(this.setStartTime(data.startTime.replace(\" \", \"T\")) + \"000\")));\n        } else if (this.meResult !== \"측정중...\") {\n          this.startTime = this.setTime(new Date(parseInt(this.setStartTime(data.startTime.replace(\" \", \"T\"), data.endTime.replace(\" \", \"T\")) + \"000\")));\n        }\n\n        this.graphShow = true;\n        this.iFrameAddListener();\n        if (this.meResult === \"측정중...\") {\n          this.endTime = this.setTime();\n        } else {\n          this.endTime = data.endTime.replace(\" \", \"T\");\n        }\n\n        this.loadKibanaUrl();\n    }\n\n    /**\n     * start Time 설정\n     * @param st DB에 저장된 start Time\n     * @param endTime End Time\n     */\n    private setStartTime(st: string, endTime?: string): any {\n        const qwe = st.replace('.000', '');\n        let asd;\n        if (endTime === null || endTime === undefined || endTime === '') {\n            asd = this.setTime();\n        } else {\n            asd = endTime.replace('.000', '');\n        }\n        let startTime = parseInt(Date.parse(qwe).toString().replace('000', ''));\n        let currentTime = parseInt(Date.parse(asd).toString().replace('000', ''));\n\n        let intervalTime;\n        if (this.repeatCount === 300) {\n            intervalTime = 300;// 5분\n        } else {\n            intervalTime = 1500;// 25분\n        }\n        // if (currentTime - intervalTime > startTime) {\n        //     return currentTime - intervalTime;\n        // } else {\n        //     return startTime;\n        // }\n        /**\n         * 보여주려는 그래프의 양을 시간값을 이용하여 조절하는 부분임.\n         * 현재시간에서 임의로 설정한 시간을 뺀 값이 측정시작시간보다 클경우, 300번 이하 측정 반복 했을 경우\n         */\n        if (currentTime - intervalTime > startTime || this.repeatCount <= 300) {\n            if (this.repeatCount === 300) {\n                return startTime;\n            } else {\n                if (currentTime - intervalTime < startTime) {\n                    return startTime - 1;\n                } else {\n                    return currentTime - intervalTime;\n                }\n            }\n        } else {\n            return startTime;\n        }\n    }\n\n    /**\n     * 시간 설정\n     * date 인자 값이 없으면 현재 시간\n     * date 인자 값이 있으면 date 값의 시간\n     * @param date \n     */\n    setTime(date?: Date): string {\n        let time: string;\n        let dt;\n        if (date === undefined || date === null) {\n            dt = new Date();\n        } else {\n            dt = date;\n        }\n        // const sdf = dt.getDate();\n        // const asd = dt.getTimezoneOffset();\n        // const dfg = dt.getMonth() + 1;\n        // const xcv = dt.getUTCMonth();\n        // const cvb = dt.getDay();\n        // const fgh = dt.getHours();\n        // const uyi = dt.getMinutes();\n        // const qwe = new Date().toISOString();\n\n        const year = dt.getFullYear();\n\n        let month: string | number = this.formatTwoDigits(dt.getMonth() + 1);\n\n        let day: string | number = this.formatTwoDigits(dt.getDate());\n\n        let hours: string | number = this.formatTwoDigits(dt.getHours());\n\n        let minutes: string | number = this.formatTwoDigits(dt.getMinutes());\n\n        let seconds: string | number = this.formatTwoDigits(dt.getSeconds());\n\n        let milisec: string | number = dt.getMilliseconds();\n        if (milisec >= 0 && milisec < 10) {\n            milisec = '00' + milisec;\n        } else if (milisec >= 10 && milisec < 100) {\n            milisec = '0' + milisec;\n        }\n\n        time = year + '-' + month + '-' + day + 'T' + hours + ':' + minutes + ':' + seconds;\n        return time;\n    }\n\n    formatTwoDigits(n: string | number): string | number {\n\n        return n < 10 ? '0' + n : n;\n    }\n\n    ngOnDestroy() {\n        this.alive = false;\n    }\n\n    public onTimeSearch(): void {\n        this.graphShow = true;\n        this.iFrameAddListener();\n        this.loadKibanaUrl();\n    }\n\n    private setInterval(): void {\n        this.qualityHistoryService.getElsCountBySessionId(this.kibanaInfo[0].host, this.kibanaInfo[0].eport, this.sessId).takeWhile(() => this.alive).subscribe(\n            responseData => {\n                console.log(responseData);\n            }\n        )\n    }\n\n    private loadKibanaUrl(): void {\n        const that = this;\n        this.configService.getKibanaListAll().takeWhile(() => this.alive).subscribe(\n            responseData => {\n                that.kibanaInfo = responseData['result']['content'];\n                that.setIframeUrl();\n            },\n            error => {\n                if (error['error'].result.indexOf(that.ERROR_NOT_FOUND) != -1) {\n                    alert(error['error']['message']);\n                }\n                console.log(error['error']['message']);\n            }\n        )\n    }\n\n    public onNoClick(): void {\n        this.dialogRef.close(null);\n    }\n\n    private setIframeUrl(): void {\n        // if (this.repeatCount === -1) {\n        //     this.setUrlByInfi();\n        // } else {\n        //     this.setUrl();\n        // }\n\n\n        // (this.repeatCount === 10 || this.repeatCount === 100 || this.repeatCount === 300 || this.repeatCount === 600 || this.repeatCount === 3600 || this.repeatCount === 7200) ? this.setUrlByInfi() : this.setUrl();\n        this.setUrlByInfi();\n\n\n        this.iframeAllUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(this.allUrl);\n        this.router.events.subscribe((evt) => {\n            if (!(evt instanceof NavigationEnd)) {\n                return;\n            }\n            window.scrollTo(0, 0)\n        });\n    }\n\n    setUrl() {\n        let uuidLength: number;\n        let uuids: string[];\n\n        if (this.protocol === 'Light TWAMP') {\n            uuidLength = this.uuidsTwamp.length + 1;\n            uuids = this.uuidsTwamp;\n        } else if (this.protocol === 'ICMP') {\n            uuidLength = this.uuidsIcmp.length + 1;\n            uuids = this.uuidsIcmp;\n        }\n\n        let gIdx = this.kibanaInfo[0].url.indexOf('?_g=()');\n        let addgIdxResult = this.strInsert(this.kibanaInfo[0].url, gIdx + 1, 'embed=true&');\n        let visCfgStr = '';\n        let locx: number;\n        let locy = 0;\n        let count = 0;\n        for (let a = 1; a < uuidLength; a++) {\n            if (a > 1) {\n                visCfgStr += ',';\n            }\n            if (a % 2 == 0) {\n                locx = 24;\n            } else { locx = 0; }\n            // if (this.repeatCount === 100) {\n            //     this.repeatCount = 60;\n            // }\n            visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + a + '\\',w:24,x:' + locx + ',y:' + locy + '),id:\\'' + uuids[a - 1] + this.repeatCount + '\\',panelIndex:\\'' + a + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n            count++;\n            if (count == 2) {\n                locy += 15;\n                count = 0;\n            }\n        }\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'1\\',w:24,x:0,y:0),id:\\'' + this.LP_UUID + this.repeatCount + '\\',panelIndex:\\'1\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'2\\',w:24,x:24,y:0),id:\\'' + this.DP_UUID + this.repeatCount + '\\',panelIndex:\\'2\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'3\\',w:24,x:0,y:15),id:\\'' + this.OoOP_UUID + this.repeatCount + '\\',panelIndex:\\'3\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'4\\',w:24,x:24,y:15),id:\\'' + this.PDV_UUID + this.repeatCount + '\\',panelIndex:\\'4\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'5\\',w:24,x:0,y:30),id:\\'' + this.IPDV_UUID + this.repeatCount + '\\',panelIndex:\\'5\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'6\\',w:24,x:24,y:30),id:\\'' + this.ID_UUID + this.repeatCount + '\\',panelIndex:\\'6\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'7\\',w:24,x:0,y:45),id:\\'' + this.RTT_UUID + this.repeatCount + '\\',panelIndex:\\'7\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'8\\',w:24,x:24,y:45),id:\\'' + this.LD_UUID + this.sessId + '\\',panelIndex:\\'8\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        // visCfgStr += ',';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'9\\',w:24,x:0,y:60),id:\\'' + this.TTL_UUID + this.sessId + '\\',panelIndex:\\'9\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n        const gOps = 'refreshInterval:(pause:!t,value:0),time:(from:\\'2010-11-30T15:00:00.000Z\\',mode:absolute,to:\\'' + this.endTime + 'Z\\')';\n        let visIntervalIdx = addgIdxResult.indexOf('e&_g=()');\n        let addGResult = this.strInsert(addgIdxResult, visIntervalIdx + 6, gOps);\n        \n        let visCfgIdx = addGResult.indexOf('panels:!()');\n        let addVisCfgResult = this.strInsert(addGResult, visCfgIdx + 9, visCfgStr);\n\n        const startTimeparse = Date.parse(this.startTime) - this.timezone;\n        const endTimeparse = Date.parse(this.endTime) - this.timezone;\n\n        let filters = '(\\'$state\\':(store:appState),meta:(alias:!n,disabled:!f,index:\\'77b1b590-9ac5-11e8-92d3-7f0263a523d8\\',key:start_time,negate:!f,params:(format:epoch_millis,gte:' + startTimeparse + ',lt:' + endTimeparse + '),type:range,value:\\'September%205th%202018,%2011:25:13.333%20to%20September%205th%202018,%2012:05:37.575\\'),range:(start_time:(format:epoch_millis,gte:' + startTimeparse + ',lt:' + endTimeparse + ')))';\n\n        let visFilterIdx = addVisCfgResult.indexOf('ilters:!(),fullS');\n        let addVisFilterResult = this.strInsert(addVisCfgResult, visFilterIdx + 9, filters);\n\n        let queryAddIndex = addVisFilterResult.indexOf('query:\\'\\'');\n        this.allUrl = this.strInsert(addVisFilterResult, queryAddIndex + 7, 'session_id:' + this.sessId);\n\n        console.log(this.allUrl);\n    }\n    setUrlByInfi() {\n\n        let uuidLength: number;\n        let uuids: string[];\n        let intervalSec: string;\n        if (this.repeatCount <= 100) {\n            intervalSec = '1s';\n        } else {\n            intervalSec = '5s';\n        }\n\n        uuidLength = this.uuidsTwamp.length + 1;\n        uuids = this.uuidsTwamp;\n\n        // if (this.protocol === 'TWAMP') {\n        //     uuidLength = this.uuidsTwamp.length + 1;\n        //     uuids = this.uuidsTwamp;\n        // } else if (this.protocol === 'ICMP') {\n        //     uuidLength = this.uuidsIcmp.length + 1;\n        //     uuids = this.uuidsIcmp;\n        // }\n\n        const startTimeparse = this.setTime(new Date(Date.parse(this.startTime) - this.timezone));\n        const endTimeparse = this.setTime(new Date(Date.parse(this.endTime) - this.timezone));\n        \n        let gIdx = this.kibanaInfo[0].url.indexOf('?_g=()');\n        let addgIdxResult = this.strInsert(this.kibanaInfo[0].url, gIdx + 1, 'embed=true&');\n        let visCfgStr = '';\n        let locx: number;\n        let locy = 0;\n        let count = 0;\n        for (let a = 1; a < uuidLength; a++) {\n            if (a > 1) {\n                visCfgStr += ',';\n            }\n            if (a % 2 == 0) {\n                locx = 24;\n            } else { locx = 0; }\n\n            visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + a + '\\',w:24,x:' + locx + ',y:' + locy + '),id:\\'' + uuids[a - 1] + intervalSec + '\\',panelIndex:\\'' + a + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n            count++;\n            if (count == 2) {\n                locy += 15;\n                count = 0;\n            }\n        }\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 1 + '\\',w:24,x:' + 0 + ',y:' + 0 + '),id:\\'' + this.uuids[a - 1] + '5s' + '\\',panelIndex:\\'' + 1 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\'),';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 2 + '\\',w:24,x:' + 24 + ',y:' + 0 + '),id:\\'609fa4a0-b0e3-11e8-a708-d97c9dcf4dae\\',panelIndex:\\'' + 2 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\'),';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 3 + '\\',w:24,x:' + 0 + ',y:' + 15 + '),id:\\'c91f5a20-b0e3-11e8-a708-d97c9dcf4dae\\',panelIndex:\\'' + 3 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\'),';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 4 + '\\',w:24,x:' + 24 + ',y:' + 15 + '),id:\\'04405be0-b0c6-11e8-a708-d97c9dcf4dae\\',panelIndex:\\'' + 4 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\'),';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 5 + '\\',w:24,x:' + 0 + ',y:' + 30 + '),id:\\'e2164a30-b01a-11e8-a708-d97c9dcf4dae\\',panelIndex:\\'' + 5 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\'),';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 6 + '\\',w:24,x:' + 24 + ',y:' + 30 + '),id:\\'0c9e5d10-b0e3-11e8-a708-d97c9dcf4dae\\',panelIndex:\\'' + 6 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\'),';\n        // visCfgStr += '(embeddableConfig:(),gridData:(h:15,i:\\'' + 7 + '\\',w:24,x:' + 0 + ',y:' + 45 + '),id:\\'96847240-b0e2-11e8-a708-d97c9dcf4dae\\',panelIndex:\\'' + 7 + '\\',type:visualization,version:\\'' + this.kibanaVersion + '\\')';\n\n        /**\n         * 77b1b590-9ac5-11e8-92d3-7f0263a523d8\n         * 39463e30-56a8-11e9-be92-2f083c355e12\n         */\n        let filters1 = '(\\'$state\\':(store:appState),meta:(alias:!n,disabled:!f,index:\\'77b1b590-9ac5-11e8-92d3-7f0263a523d8\\',key:start_time,negate:!f,params:(format:epoch_millis,gte:\\'' + startTimeparse + '\\',lt:' + endTimeparse + '),type:range,value:\\'September%205th%202018,%2011:25:13.333%20to%20September%205th%202018,%2012:05:37.575\\'),range:(start_time:(format:epoch_millis,gte:' + startTimeparse + ',lt:' + endTimeparse + ')))';\n        let filters2 = '(\\'$state\\':(store:appState),meta:(alias:!n,disabled:!f,index:\\'77b1b590-9ac5-11e8-92d3-7f0263a523d8\\',key:start_time,negate:!f,params:(gte:\\'' + startTimeparse + '\\',lt:\\'' + endTimeparse + '\\'),type:range,value:\\'' + startTimeparse + '%20to%' + endTimeparse + '\\'),range:(start_time:(gte:\\'' + startTimeparse + '\\',lt:\\'' + endTimeparse + '\\')))';\n        \n        const intervalOps = 'refreshInterval:(pause:!t,value:0),time:(from:\\'' + startTimeparse + 'Z\\',mode:absolute,to:\\'' + endTimeparse + 'Z\\')';\n\n        let visIntervalIdx = addgIdxResult.indexOf('e&_g=()');\n        let addVisIntervalResult = this.strInsert(addgIdxResult, visIntervalIdx + 6, intervalOps);\n\n        // let visFilterIdx = addVisIntervalResult.indexOf('ilters:!(),fullS');\n        // let addVisFilterResult = this.strInsert(addVisIntervalResult, visFilterIdx + 9, filters2);\n\n        let visCfgIdx = addVisIntervalResult.indexOf('panels:!()');\n        let addVisCfgResult = this.strInsert(addVisIntervalResult, visCfgIdx + 9, visCfgStr);\n\n        let queryAddIndex = addVisCfgResult.indexOf('query:\\'\\'');\n        this.allUrl = this.strInsert(addVisCfgResult, queryAddIndex + 7, 'session_id:' + this.sessId);\n\n        console.log(this.allUrl);\n    }\n    strInsert(str: string, index: number, value: string) {\n        return str.substr(0, index) + value + str.substr(index);\n    }\n\n    private iFrameAddListener() {\n        let that = this;\n        let eventMethod = 'addEventListener';\n        let eventer = window[eventMethod];\n        let messageEvent = eventMethod == 'attachEvent' ? 'onmessage' : 'message';\n\n        // Listen to message from parent (or any other) window\n        eventer(messageEvent, this.pluginNotification);\n\n    }\n\n    private pluginNotification = (e) => {\n        let that = this;\n        if (e.data && !e.data.type) {\n            let func = e.data.split('##')[0];\n            let res = JSON.parse(e.data.split('##')[1]);\n            console.log('func:', func, 'res:', res);\n        }\n        // if (func == \"load\") {\n        //   that.createBaseDashboard()\n        // }\n    };\n\n}","module.exports = \"<!-- title -->\\n<div class=\\\"title_area\\\">\\n  <div class=\\\"title\\\">품질 측정</div>\\n</div>\\n<!-- end title -->\\n\\n<!-- search-->\\n<div class=\\\"search_view\\\" style=\\\"padding-left: 43px;\\\">\\n  <form name=\\\"form1\\\" method=\\\"post\\\" action=\\\"\\\" novalidate [formGroup]=\\\"MeasureForm\\\" (ngSubmit)=\\\"onMeasureClick()\\\">\\n    <table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"0\\\" class=\\\"search_list\\\" style=\\\"width: 100%\\\">\\n      <tr>\\n        <th width=\\\"100\\\">Sender IP</th>\\n        <td class=\\\"left\\\">\\n          <!-- <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"measureData.senderIp\\\" formControlName=\\\"senderIp\\\" required> -->\\n          <select name=\\\"select\\\" style=\\\"width: 184px;\\\" [(ngModel)]=\\\"measureData.senderIp\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n            <option *ngFor=\\\"let reflector of reflectors\\\" [value]=\\\"reflector.reflectorIp\\\">{{reflector.reflectorIp}}</option>\\n          </select>\\n        </td>\\n        <th width=\\\"100\\\">Reflector IP</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"measureData.reflectorIp\\\" formControlName=\\\"reflectorIp\\\" placeholder=\\\"Reflector IP 입력\\\" required>\\n        </td>\\n      </tr>\\n      <tr>\\n        <th>Sender Port</th>\\n        <td class=\\\"left\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"measureData.senderPort\\\" formControlName=\\\"senderPort\\\" placeholder=\\\"Sender Port 입력\\\" required>\\n        </td>\\n        <th>Reflector Port</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"measureData.reflectorPort\\\" formControlName=\\\"reflectorPort\\\" placeholder=\\\"Reflector Port 입력\\\" required>\\n        </td>\\n      </tr>\\n      <tr>\\n        <th>Rate(packet/sec)</th>\\n        <td class=\\\"left\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"measureData.sendCount\\\" formControlName=\\\"sendCount\\\" placeholder=\\\"숫자 입력\\\" required>\\n          <span style=\\\"color: red; font-size: 0.9em;\\\">\\n              최소:1,최대:10000\\n          </span>\\n        </td>\\n        <th>측정시간</th>\\n        <td>\\n          <select name=\\\"select\\\" style=\\\"width: 184px;\\\" [(ngModel)]=\\\"rpcSelected\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n            <option *ngFor=\\\"let rpc of rpCount\\\" [value]=\\\"rpc.value\\\">{{rpc.type}}</option>\\n          </select>\\n        </td>\\n        <!-- <td colspan=\\\"2\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"measureData.repeatCount\\\" formControlName=\\\"repeatCount\\\" required>\\n        </td> -->\\n      </tr>\\n      <tr>\\n        <!-- <th>Duration</th>\\n        <td class=\\\"left\\\">\\n          <input type=\\\"number\\\" name=\\\"textfield\\\" value=\\\"1000\\\" [(ngModel)]=\\\"measureData.duration\\\" formControlName=\\\"duration\\\" required>\\n        </td> -->\\n        <th>측정모드</th>\\n        <td>\\n          <select name=\\\"select\\\" style=\\\"width: 184px;\\\" [(ngModel)]=\\\"ptcSelected\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n            <option *ngFor=\\\"let ptc of protocol\\\" [value]=\\\"ptc.id\\\">{{ptc.type}}</option>\\n          </select>\\n        </td>\\n        <th>Time out</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"measureData.timeout\\\" formControlName=\\\"timeout\\\" placeholder=\\\"숫자 입력\\\" required>\\n          <span style=\\\"color: red; font-size: 0.9em;\\\">\\n            최소:1,최대:300(s)\\n          </span>\\n        </td>\\n      </tr>\\n      <tr [hidden]=\\\"!((measureData.measureMode == 'authorized' || measureData.measureMode == 'encryption') && ptcSelected == '1')\\\">\\n        <th>ID</th>\\n        <td class=\\\"left\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"measureData.id\\\" formControlName=\\\"id\\\" placeholder=\\\"4자 이상\\\" appSomeAsyncValidator>\\n        </td>\\n        <th>Password</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"measureData.password\\\" formControlName=\\\"password\\\" placeholder=\\\"4자 이상\\\" appSomeAsyncValidator>\\n        </td>\\n      </tr>\\n      <tr *ngIf=\\\"ptcSelected == '1'\\\">\\n        <td colspan=\\\"2\\\">\\n          <mat-radio-group name=\\\"matRadioBtn\\\" [(ngModel)]=\\\"measureData.measureMode\\\" (change)=\\\"this.measureModeChange(measureData.measureMode)\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n            <mat-radio-button class=\\\"radioBtn\\\" value=\\\"unauthorized\\\">무인증</mat-radio-button>\\n            <mat-radio-button class=\\\"radioBtn\\\" value=\\\"authorized\\\">인증</mat-radio-button>\\n            <mat-radio-button class=\\\"radioBtn\\\" value=\\\"encryption\\\">암호화</mat-radio-button>\\n          </mat-radio-group>\\n          <!-- <mat-checkbox style=\\\"margin-right: 10px;\\\" [(ngModel)]=\\\"isUnauthorized\\\" [ngModelOptions]=\\\"{standalone: true}\\\">무인증</mat-checkbox>\\n          <mat-checkbox style=\\\"margin-right: 10px;\\\" [(ngModel)]=\\\"isAuthorized\\\" [ngModelOptions]=\\\"{standalone: true}\\\">인증</mat-checkbox>\\n          <mat-checkbox style=\\\"margin-right: 10px;\\\" [(ngModel)]=\\\"isEncryption\\\" [ngModelOptions]=\\\"{standalone: true}\\\">암호화</mat-checkbox> -->\\n        </td>\\n      </tr>\\n    </table>\\n    <button type=\\\"submit\\\" class=\\\"btn\\\" style=\\\"position: relative; left: 43%;\\\" mat-raised-button [ngClass]=\\\"{'btn-primary' : MeasureForm.valid, 'disabled' : !MeasureForm.valid || btnDisabled}\\\" [disabled]=\\\"!MeasureForm.valid || btnDisabled\\\">측정</button>\\n  </form>\\n  <span class=\\\"quality_progress_bar\\\" *ngIf=\\\"btnDisabled\\\">\\n    <div class=\\\"quality_progress_bar\\\">\\n      <mat-progress-bar class=\\\"green-progress\\\" mode=\\\"indeterminate\\\" style=\\\"top: 11px;\\\"></mat-progress-bar>\\n    </div>\\n    <div class=\\\"quality_progress_bar\\\" style=\\\"top: 5px;margin-bottom: 10px;\\\">\\n        품질 측정 중 ...\\n    </div>\\n  </span>\\n</div>\\n<!-- end search -->\\n\\n<!-- 품질측정 -->\\n<span *ngIf=\\\"listIsExist; else empty\\\">\\n  <!-- table -->\\n  <div class=\\\"table_header\\\">\\n    <div class=\\\"th_page\\\">\\n      <b>총\\n        <span>{{count}}</span> 건</b> [{{pg}}/{{allpage}}페이지]</div>\\n  </div>\\n\\n  <table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"list_tl\\\">\\n    <tr>\\n      <th width=\\\"13%\\\">측정 시작시간</th>\\n      <th width=\\\"10%\\\">Sender IP</th>\\n      <th width=\\\"10%\\\">Reflector IP</th>\\n      <th width=\\\"11%\\\">Send Count</th>\\n      <th width=\\\"11%\\\">Repeat Count</th>\\n      <th width=\\\"11%\\\">Sender Port</th>\\n      <th width=\\\"11%\\\">Reflector Port</th>\\n      <th width=\\\"8%\\\">Protocol</th>\\n      <th width=\\\"8%\\\">측정모드</th>\\n      <!-- <th width=\\\"7%\\\">pid</th>\\n      <th>비고</th> -->\\n    </tr>\\n    <tr *ngFor=\\\"let currentStatus of currentStatusData\\\">\\n      <td>{{currentStatus.startTime}}</td>\\n      <td>{{currentStatus.senderIp}}</td>\\n      <td>{{currentStatus.reflectorIp}}</td>\\n      <td>{{currentStatus.sendCount}}</td>\\n      <!-- <td *ngIf=\\\"currentStatus.repeatCount == -1\\\">무한 반복</td>\\n      <td *ngIf=\\\"currentStatus.repeatCount != -1\\\">{{currentStatus.repeatCount}}</td> -->\\n      <td *ngIf=\\\"currentStatus.repeatCount == 1\\\">1초</td>\\n      <td *ngIf=\\\"currentStatus.repeatCount == 10\\\">10초</td>\\n      <td *ngIf=\\\"currentStatus.repeatCount == 60\\\">1분</td>\\n      <td *ngIf=\\\"currentStatus.repeatCount == 300\\\">5분</td>\\n      <td *ngIf=\\\"currentStatus.repeatCount == 600\\\">10분</td>\\n      <td *ngIf=\\\"currentStatus.repeatCount == 3600\\\">1시간</td>\\n      <td *ngIf=\\\"currentStatus.repeatCount == 7200\\\">2시간</td>\\n      <td *ngIf=\\\"currentStatus.repeatCount != 1 && currentStatus.repeatCount != 10 && currentStatus.repeatCount != 60 && currentStatus.repeatCount != 300 && currentStatus.repeatCount != 600 && currentStatus.repeatCount != 3600 && currentStatus.repeatCount != 7200\\\">{{currentStatus.repeatCount}}</td>\\n      <td>{{currentStatus.senderPort}}</td>\\n      <td *ngIf=\\\"currentStatus.protocol !== 'ICMP'\\\">{{currentStatus.reflectorPort}}</td>\\n      <td *ngIf=\\\"currentStatus.protocol === 'ICMP'\\\"></td>\\n      <td>{{currentStatus.protocol}}</td>\\n      <td *ngIf=\\\"currentStatus.measureMode === 'unauthorized'\\\">무인증</td>\\n      <td *ngIf=\\\"currentStatus.measureMode === 'authorized'\\\">인증</td>\\n      <td *ngIf=\\\"currentStatus.measureMode === 'encryption'\\\">암호화</td>\\n      <td *ngIf=\\\"currentStatus.measureMode === ''\\\">.</td>\\n      <!-- <td>{{currentStatus.pid}}</td>\\n      <td>\\n        <a type=\\\"button\\\" class=\\\" btn-sm btn-primary\\\" (click)=\\\"onStopClick(currentStatus)\\\">중지</a>\\n      </td> -->\\n    </tr>\\n  </table>\\n\\n  <!-- pageing -->\\n  <div class=\\\"pagin_area\\\">\\n    <div class=\\\"paging\\\">\\n      <span *ngIf=\\\"pg > block && pg != 1\\\">\\n        <a (click)=\\\"pageMove(0)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_first.png\\\" border=\\\"0\\\" align=\\\"absmiddle\\\" alt=\\\"back\\\">\\n        </a>\\n        <a (click)=\\\"pageMove(pg - 2)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_prev.png\\\" border=\\\"0\\\" alt=\\\"back\\\">\\n        </a>\\n      </span>\\n      <span *ngFor=\\\"let index of paginationIndex\\\">\\n        <span *ngIf=\\\"pg == index; else notvalid\\\">\\n          <span (click)=\\\"pageMove(index - 1)\\\" class=\\\"r\\\">{{index}}</span>\\n        </span>\\n        <ng-template #notvalid>\\n          <span style=\\\"cursor:pointer;\\\" *ngIf=\\\"pg >= index || index <= allpage\\\">\\n            <a (click)=\\\"pageMove(index - 1)\\\">{{index}}</a>\\n          </span>\\n        </ng-template>\\n      </span>\\n      <span *ngIf=\\\"endpage < allpage\\\">\\n        <a (click)=\\\"pageMove(pg)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_next.png\\\" border=\\\"0\\\" alt=\\\"next\\\">\\n        </a>\\n        <a (click)=\\\"pageMove(allpage - 1)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_last.png\\\" border=\\\"0\\\" alt=\\\"next\\\">\\n        </a>\\n      </span>\\n    </div>\\n  </div>\\n  <!--end pageing-->\\n\\n  <!-- end table -->\\n</span>\\n<ng-template #empty>\\n  <div class=\\\"div_quality\\\">\\n    <div class=\\\"qual_text\\\">품질 측정을 진행해 주세요.</div>\\n  </div>\\n</ng-template>\\n\"","import { Component, OnInit, OnDestroy, ComponentRef } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { Subscription } from 'rxjs';\n\nimport { CurrentStatusService } from '../../_services/currentStatus/current-status.service';\nimport { MessageService } from '../../_services/Message/message.service';\nimport { ErrorService } from '../../_services/error/error.service';\n\nimport { CurrentStatus } from '../../_models/CurrentStatus';\nimport { Protocol, RepeatCount } from '../../_models/Dashboard';\nimport { WebSocketMsg } from '../../_models/WebSocketMsg';\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\n\nimport { AppConfig } from '../../_services/config/AppConfig';\nimport * as Stomp from 'stompjs';\nimport * as SockJS from 'sockjs-client';\n\nimport { v4 as uuid } from 'uuid';\nimport { ReflectorService } from 'src/app/_services/reflector/reflector.service';\nimport { ChangeDetectionStrategy } from '@angular/compiler/src/core';\n\n@Component({\n    templateUrl: 'quality-measurement.component.html'\n})\nexport class QualityMeasurementComponent implements OnDestroy {\n\n    private serverUrl = AppConfig.settings.apiServer.url + '/socket';\n    private stompClient;\n\n    subscription: Subscription;\n    alive = true;\n\n    currentStatusData: any;\n    measureData: CurrentStatus;\n    count: any;\n\n    sort = 'sessId,desc';\n    \n    size = AppConfig.settings.pagination.size;\n    pg: number = 0; // 현재 페이지\n    block = AppConfig.settings.pagination.block; // 하단 페이지 넘버 개수\n\n    allpage: number;      // 모든 페이지 수\n    startpage: number;    // 첫 페이지\n    endpage: number;      // 마지막 페이지\n\n    paginationIndex: any;\n\n    RESULT_OK = 1;\n    ERROR_NOT_FOUND = 'Not found pageable By current Status';\n    ERROR_NULL_POINTER = '반환된 값이 Null 입니다';\n    ERROR_STATUS_RUNTIME = 'Status Runtime Exception is';\n    errorMessage = '';\n    listIsExist = false;\n\n    reflectors: object;\n    protocol: Protocol[];\n    ptcSelected: string;\n    rpCount: RepeatCount[];\n    rpcSelected: string;\n\n    /**\n     * Validation\n     */\n    MeasureForm: FormGroup;\n    senderIp: FormControl;\n    reflectorIp: FormControl;\n    sendCount: FormControl;\n    senderPort: FormControl;\n    reflectorPort: FormControl;\n    timeout: FormControl;\n    id: FormControl;\n    password: FormControl;\n    /**\n     * 품질측정 버튼\n     */\n    public btnDisabled: boolean;\n    \n    /**\n     * Fulle TWAMP Option 설정\n     */\n    public fulltwampOpt: string;\n    \n    constructor(\n        private dialog: MatDialog,\n        private currentStatusService: CurrentStatusService,\n        private reflectorService: ReflectorService,\n        private messageService: MessageService,\n        private errorService: ErrorService\n        ) {\n        this.setDataInit();\n        this.initializeWebSocketConnection();\n        this.getGlobalMessage();\n        this.validation();\n        this.getSenderIP();\n        this.pageMove(0);\n    }\n    \n    setDataInit(): void {\n\n        this.measureData = new CurrentStatus();\n\n        this.measureData.sendCount = 100;\n        this.measureData.repeatCount = 10;\n        this.measureData.senderIp = '127.0.0.1';\n        this.measureData.senderPort = 2000;\n        this.measureData.reflectorPort = 862;\n        this.measureData.timeout = 3;\n        this.protocol = [\n            { id: 1, type: \"Full TWAMP\" },\n            { id: 2, type: \"Light TWAMP\" }\n        ]\n        this.rpCount = [\n            { value : 1, type: '1초' },\n            { value : 10, type: '10초' },\n            { value : 60, type: '1분' },\n            { value : 300, type: '5분' },\n            { value : 600, type: '10분' },\n            { value : 3600, type: '1시간' },\n            { value : 7200, type: '2시간' }\n        ];\n        this.ptcSelected = '1';\n        this.rpcSelected = '10';\n        this.measureData.measureMode = 'unauthorized';\n        this.measureData.id = 'id';\n        this.measureData.password = 'password';\n        this.btnDisabled = false;\n    }\n\n    initializeWebSocketConnection() {\n        let ws = new SockJS(this.serverUrl);\n        this.stompClient = Stomp.over(ws);\n        let that = this;\n        this.stompClient.connect({}, function (frame) {\n            that.stompClient.subscribe('/dashboard/measureEnd', (message) => {\n                if (message.body) {\n                    that.pageMoveAfterStop();\n                    console.log(message);\n                }\n            });\n        });\n    }\n    \n    getGlobalMessage(): void {\n        const that = this;\n        this.subscription = this.messageService\n            .getMessage().takeWhile(() => this.alive)\n            .subscribe(message => {\n                that.errorMessage = message;\n                if (that.errorMessage === that.ERROR_NOT_FOUND) {\n                    // that.listIsExist = false;\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this.alive = false;\n        this.stompClient.disconnect();\n    }\n\n\n\n    getSenderIP(): void {\n        const that = this;\n        this.reflectorService.getReflectorListPageable(0, 1000000000, 'reflectorId,asc').takeWhile(() => this.alive).subscribe(\n            result => {\n                that.reflectors = result['result']['content'];\n                that.measureData.senderIp = that.reflectors[0].reflectorIp;\n                console.log(result);\n            },\n            error => {\n                console.log(error);\n            }\n        );\n    }\n\n    /**\n     * 페이지네이션 적용\n     * @param page \n     *                  페이지 ID(ex -> page = 0 => 1번째 페이지)\n     */\n    pageMove(page: number): void {\n        const that = this;\n        const elementSize = 0;\n        this.currentStatusService.getCurrentStatusListPageable(page, that.size, that.sort).takeWhile(() => this.alive).subscribe(\n            responseData => {\n                if (page === -1) {\n                    page++;\n                }\n                that.listIsExist = true;\n                const result: Object = responseData;\n                console.log(result['message']);\n                that.currentStatusData = result['result']['content'];\n                that.count = result['result']['totalElements'];\n                that.allpage = Math.ceil(that.count / that.size);\n                that.pg = page + 1;\n                that.startpage = (Math.floor((that.pg - 1) / that.block) * that.block) + 1;\n                that.endpage = (Math.floor((that.pg - 1) / that.block) * that.block) + that.block;\n                that.paginationIndex = Array.from(Array(that.endpage - that.startpage + 1), (x, i) => i + that.startpage);\n            },\n            error => {\n                console.log(error['error'].message);\n                if (error['error'].result.indexOf(that.ERROR_NOT_FOUND) != -1) {\n                    that.listIsExist = false;\n                } else {\n                    that.errorService.showAllListHttpError(error);\n                }\n            }\n        );\n    }\n\n    onMeasureClick(): void {\n        const that = this;\n        this.btnDisabled = true;\n        this.protocol.forEach(function (element) {\n            if (element.id == parseInt(that.ptcSelected)) {\n                that.measureData.protocol = element.type;\n            }\n        })\n        this.rpCount.forEach(function (element) {\n            if (element.value == parseInt(that.rpcSelected)) {\n                that.measureData.repeatCount = element.value;\n            }\n        })\n        let time = new Date();\n        this.measureData.startTime = this.setTime();\n        this.currentStatusService.startQualityMeasure(this.measureData).takeWhile(() => this.alive).subscribe(\n            result => {\n                if (result['type'] === 1) {\n                    alert('품질 측정이 시작되었습니다.');\n                    // that.pageMove(that.pg - 1);\n                    that.btnDisabled = false;\n                }\n            },\n            error => {\n                console.error(error);\n                if (error['error'].result.indexOf(that.ERROR_STATUS_RUNTIME) != -1) {\n                    alert(error['error'].message);\n                } else if (error['error'].message.indexOf(that.ERROR_NULL_POINTER) != -1) {\n                    alert(error['error'].result);\n                }\n                else {\n                    console.error(error['error'].message);\n                }\n                that.btnDisabled = false;\n            }\n        );\n\n    }\n\n    onStopClick(data: CurrentStatus): void {\n        const that = this;\n        this.currentStatusService.startMeasureStop(data).takeWhile(() => this.alive).subscribe(\n            result => {\n                console.log(result['message']);\n                if (result['type'] === 1) {\n                    alert(result['message']);\n                    that.pageMoveAfterStop();\n                }\n            },\n            error => {\n                if (error['error'].result.indexOf(that.ERROR_STATUS_RUNTIME) != -1) {\n                    alert(error['error'].message);\n                } else if (error['error'].message.indexOf(that.ERROR_NULL_POINTER) != -1) {\n                    if (data.pid === 0) {\n                        alert(error['error'].result);\n                    } else {\n                        alert('이미 품질 측정이 중지되었습니다.');\n                    }\n                    that.pageMoveAfterStop();\n                } else {\n                    console.log(error);\n                }\n            }\n        )\n    }\n\n    public measureModeChange(value: string): void {\n        if (value != 'unauthorized') {\n            this.measureData.id = 'Please ID';\n            this.measureData.password = 'Please Password';\n        } else {\n            this.measureData.id = 'id';\n            this.measureData.password = 'password';\n        }\n    }\n\n    pageMoveAfterStop() {\n        if (this.currentStatusData == undefined) {\n            this.pageMove(this.pg - 1);\n        } else if (this.currentStatusData.length === 1) {\n            this.pageMove(this.pg - 2);\n        } else {\n            this.pageMove(this.pg - 1);\n        }\n    }\n\n\n    setTime(): string {\n        let time: string;\n        const dt = new Date();\n        const year = dt.getFullYear();\n\n        let month: string | number = this.formatTwoDigits(dt.getMonth() + 1);\n        let day: string | number = this.formatTwoDigits(dt.getDate());\n        let hours: string | number = this.formatTwoDigits(dt.getHours());\n        let minutes: string | number = this.formatTwoDigits(dt.getMinutes());\n        let seconds: string | number = this.formatTwoDigits(dt.getSeconds());\n        let milisec: string | number = dt.getMilliseconds();\n\n        if (milisec >= 0 && milisec < 10) {\n            milisec = '00' + milisec;\n        } else if (milisec >= 10 && milisec < 100) {\n            milisec = '0' + milisec;\n        }\n\n        time = year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds + '.' + milisec;\n        return time;\n    }\n\n    formatTwoDigits(n: string | number): string | number {\n\n        return n < 10 ? '0' + n : n;\n    }\n\n    validation(): void {\n        this.reflectorIp = new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.pattern('^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n        ]));\n        this.sendCount = new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.min(1),\n            Validators.max(10000)\n        ]));\n        this.senderPort = new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.min(1),\n            Validators.max(65535)\n        ]));\n        this.reflectorPort = new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.min(1),\n            Validators.max(65535)\n        ]));\n        this.timeout = new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.min(1),\n            Validators.max(300),\n            Validators.pattern('^[1-9]{1}$|^[1-9]{1}[0-9]{1}$|^[1-2]{1}[0-9]{1}[0-9]{1}$|^300$')\n        ]))\n        this.id = new FormControl('', Validators.compose([\n            Validators.required\n        ]));\n        this.password = new FormControl('', Validators.compose([\n            Validators.required\n        ]));\n\n        this.MeasureForm = new FormGroup({\n            reflectorIp: this.reflectorIp,\n            sendCount: this.sendCount,\n            reflectorPort: this.reflectorPort,\n            senderPort: this.senderPort,\n            timeout: this.timeout,\n            id: this.id,\n            password: this.password\n        });\n    }\n}\n","module.exports = \"<!-- title -->\\n<div class=\\\"title_area\\\">\\n  <div class=\\\"title\\\">Reflector 등록</div>\\n</div>\\n<!-- end title -->\\n\\n<!-- search-->\\n<div class=\\\"search_view p_20\\\">\\n  <form name=\\\"form1\\\" method=\\\"post\\\" action=\\\"\\\" novalidate [formGroup]=\\\"reflectorForm\\\" (ngSubmit)=\\\"onAddclick()\\\">\\n    <table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"6\\\" class=\\\"search_list\\\">\\n      <tr>\\n        <th width=\\\"100\\\" height=\\\"40\\\"> Reflector IP</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"reflector.reflectorIp\\\" formControlName=\\\"reflectorIp\\\" required>\\n        </td>\\n      </tr>\\n      <tr>\\n        <th height=\\\"40\\\">Protocol</th>\\n        <td>\\n          <span class=\\\"p_r25\\\">\\n            <input name=\\\"checkbox\\\" type=\\\"checkbox\\\" [checked]=\\\"fullTWAMP\\\" (change)=\\\"fullTWAMP = $event.target.checked\\\"> Full TWAMP </span>\\n          <span class=\\\"p_r25\\\">\\n            <input name=\\\"checkbox\\\" type=\\\"checkbox\\\" [checked]=\\\"lightTWAMP\\\" (change)=\\\"lightTWAMP = $event.target.checked\\\"> Light TWAMP </span>\\n        </td>\\n      </tr>\\n      <tr>\\n        <th height=\\\"40\\\">Reflector Port</th>\\n        <!-- <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"reflector.port\\\" formControlName=\\\"port\\\" required>\\n        </td> -->\\n        <td *ngIf=\\\"fullTWAMP == false && lightTWAMP == true; else addport\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" style=\\\"background: #dadada\\\" disabled>\\n        </td>\\n        <ng-template #addport>\\n            <td>\\n                <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"reflector.port\\\" formControlName=\\\"port\\\" required>\\n              </td>\\n        </ng-template>\\n      </tr>\\n      <tr>\\n        <th width=\\\"100\\\" height=\\\"40\\\"> Address</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"reflector.address\\\" formControlName=\\\"address\\\" required>\\n        </td>\\n      </tr>\\n    </table>\\n    <div class=\\\"btn_dialog\\\">\\n      <button *ngIf=\\\"!(fullTWAMP == false && lightTWAMP == true)\\\" type=\\\"submit\\\" mat-raised-button class=\\\"btn\\\" [ngClass]=\\\"{'btn-basics' : reflectorForm.valid, 'disabled' : !reflectorForm.valid}\\\" [disabled]=\\\"!reflectorForm.valid\\\">등록</button>\\n      <button *ngIf=\\\"fullTWAMP == false && lightTWAMP == true\\\" type=\\\"submit\\\" mat-raised-button class=\\\"btn\\\" [ngClass]=\\\"{'btn-basics' : reflectorIpValidation(), 'disabled' : !reflectorIpValidation()}\\\" [disabled]=\\\"!reflectorIpValidation()\\\">등록</button>\\n      <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"onNoClick()\\\">취소</button>\\n    </div>\\n  </form>\\n</div>\\n<!-- end search -->\\n\\n<!-- <div class=\\\"btn_area\\\">\\n  <button type=\\\"button\\\" class=\\\"btn btn-basics\\\" (click)=\\\"onAddclick()\\\">등록</button>\\n  <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"onNoClick()\\\">취소</button>\\n</div> -->\"","module.exports = \"<!-- title -->\\n<div class=\\\"title_area\\\">\\n  <div class=\\\"title\\\">Reflector 관리</div>\\n</div>\\n<!-- end title -->\\n\\n<!-- search-->\\n<div class=\\\"search_view\\\">\\n  <form name=\\\"form1\\\" method=\\\"post\\\" action=\\\"\\\" novalidate [formGroup]=\\\"reflectorMgmtForm\\\" (ngSubmit)=\\\"onSearchClick()\\\">\\n    <table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"6\\\" class=\\\"search_list\\\">\\n      <tr>\\n        <th width=\\\"80\\\">Reflector IP</th>\\n        <td class=\\\"left\\\">\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"searchReflectorIp\\\" formControlName=\\\"reflectorIp\\\">\\n        </td>\\n        <th width=\\\"60\\\">Protocol</th>\\n        <td colspan=\\\"2\\\">\\n          <select name=\\\"select\\\" style=\\\"width: 184px;\\\" [(ngModel)]=\\\"ptcSelected\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n            <option *ngFor=\\\"let ptc of protocol\\\" [value]=\\\"ptc.id\\\">{{ptc.type}}</option>\\n          </select>\\n        </td>\\n        <td>\\n          <button type=\\\"submit\\\" class=\\\"btn\\\" mat-raised-button [ngClass]=\\\"{'btn-primary' : reflectorMgmtForm.valid, 'disabled' : !reflectorMgmtForm.valid}\\\"\\n            [disabled]=\\\"!reflectorMgmtForm.valid\\\">검색</button>\\n        </td>\\n        <td *ngIf=\\\"isSearch\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" mat-raised-button (click)=\\\"onAllListClick()\\\">전체 목록 보기</button>\\n        </td>\\n      </tr>\\n    </table>\\n  </form>\\n</div>\\n<!-- end search -->\\n\\n\\n<span *ngIf=\\\"listIsExist\\\">\\n  <!-- table -->\\n  <div class=\\\"table_header\\\">\\n    <div class=\\\"th_page\\\">\\n      <b>총\\n        <span>{{count}}</span> 건</b> [{{pg}}/{{allpage}}페이지]</div>\\n  </div>\\n\\n  <table width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"list_tl\\\">\\n    <tr>\\n      <th width=\\\"8%\\\">\\n        <input type=\\\"checkbox\\\" name=\\\"checkbox\\\" [checked]=\\\"allDeleteCheck\\\" (change)=\\\"allDeleteCheck = $event.target.checked; clickOnAllListDelete($event)\\\">\\n      </th>\\n      <th width=\\\"17%\\\">Reflector IP</th>\\n      <th width=\\\"10%\\\">Reflector Port</th>\\n      <th width=\\\"17%\\\">Protocol</th>\\n      <th width=\\\"30%\\\">Address</th>\\n      <th>비고</th>\\n    </tr>\\n    <tr *ngFor=\\\"let reflector of ReflectorData\\\">\\n      <td>\\n        <input type=\\\"checkbox\\\" name=\\\"checkbox\\\" [checked]=\\\"reflector.deleteCheck\\\" (change)=\\\"reflector.deleteCheck = $event.target.checked; clickOnOneListDelete($event.target.checked)\\\">\\n      </td>\\n      <td>{{reflector.reflectorIp}}</td>\\n      <td *ngIf=\\\"reflector.protocol.type != 'ICMP'; else mgmtport\\\">{{reflector.port}}</td>\\n      <ng-template #mgmtport>\\n        <td></td>\\n      </ng-template>\\n      <td>{{reflector.protocol.type}}</td>\\n      <td>{{reflector.address}}</td>\\n      <td>\\n        <a type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" (click)=\\\"openReflectorModifyDialog(reflector)\\\">수정</a>\\n      </td>\\n    </tr>\\n  </table>\\n  <!-- end table -->\\n\\n  <!-- paging -->\\n  <div class=\\\"pagin_area\\\">\\n    <div class=\\\"paging\\\">\\n      <span *ngIf=\\\"pg > block && pg != 1\\\">\\n        <a (click)=\\\"pageMove(0)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_first.png\\\" border=\\\"0\\\" align=\\\"absmiddle\\\" alt=\\\"back\\\">\\n        </a>\\n        <a (click)=\\\"pageMove(pg - 2)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_prev.png\\\" border=\\\"0\\\" alt=\\\"back\\\">\\n        </a>\\n      </span>\\n      <span *ngFor=\\\"let index of paginationIndex\\\">\\n        <span *ngIf=\\\"pg == index; else notvalid\\\">\\n          <span (click)=\\\"pageMove(index - 1)\\\" class=\\\"r\\\">{{index}}</span>\\n        </span>\\n        <ng-template #notvalid>\\n          <span style=\\\"cursor:pointer;\\\" *ngIf=\\\"pg >= index || index <= allpage\\\">\\n            <a (click)=\\\"pageMove(index - 1)\\\">{{index}}</a>\\n          </span>\\n        </ng-template>\\n      </span>\\n      <span *ngIf=\\\"endpage < allpage\\\">\\n        <a (click)=\\\"pageMove(pg)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_next.png\\\" border=\\\"0\\\" alt=\\\"next\\\">\\n        </a>\\n        <a (click)=\\\"pageMove(allpage - 1)\\\" class=\\\"p\\\" style=\\\"cursor:pointer;\\\">\\n          <img src=\\\"app/_views/_images/btn_page_last.png\\\" border=\\\"0\\\" alt=\\\"next\\\">\\n        </a>\\n      </span>\\n    </div>\\n  </div>\\n  <!--end pageing-->\\n\\n  <div class=\\\"btn_area\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-basics\\\" (click)=\\\"openReflectorAddDialog()\\\">추가</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"onDeleteClick()\\\">삭제</button>\\n  </div>\\n</span>\\n\\n<span *ngIf=\\\"!listIsExist && !isSearch\\\">\\n  <div class=\\\"div_quality\\\">\\n    <div class=\\\"qual_text\\\">Reflector를 추가해 주세요.</div>\\n  </div>\\n  <div class=\\\"btn_area\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-basics\\\" (click)=\\\"openReflectorAddDialog()\\\">추가</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"onDeleteClick()\\\">삭제</button>\\n  </div>\\n</span>\\n\\n<span *ngIf=\\\"!listIsExist && isSearch\\\">\\n  <div class=\\\"div_quality\\\">\\n    <div class=\\\"qual_text\\\">검색 조건에 해당하는 값이 없습니다.</div>\\n  </div>\\n</span>\\n\\n<ngx-spinner bdColor=\\\"rgba(51, 51, 51, 0.8)\\\" size=\\\"large\\\" color=\\\"#fff\\\" type=\\\"ball-clip-rotate\\\"></ngx-spinner>\"","import { Component, Inject, OnInit, OnDestroy, ComponentRef } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { Reflector } from '../../_models/Reflector';\nimport { Protocol } from '../../_models/Dashboard';\nimport { AppConfig } from '../../_services/config/AppConfig';\nimport { ReflectorService } from '../../_services/reflector/reflector.service';\nimport { MessageService } from '../../_services/Message/message.service';\nimport { ErrorService } from '../../_services/error/error.service';\nimport { GeocodeService } from 'src/app/_services/geocode/geocode.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n    templateUrl: 'reflector-mgmt.component.html'\n})\nexport class ReflectorMgmtComponent implements OnInit, OnDestroy {\n\n    subscription: Subscription;\n    alive = true;\n\n    ReflectorData: Reflector[];\n\n    count: any;\n\n    sort = 'reflectorId,desc';\n    size = AppConfig.settings.pagination.size;// 현재 페이지의 목록 개수\n    pg: number; // 현재 페이지\n    block = AppConfig.settings.pagination.block; // 하단 페이지의 넘버 개수\n\n    allpage: number;      // 모든 페이지 수\n    startpage: number;    // 첫 페이지\n    endpage: number;      // 마지막 페이지\n\n    paginationIndex: any;\n\n    RESULT_OK = 1;\n    RESULT_FAIL = 0;\n\n    fullTWAMP: boolean;\n    lightTWAMP: boolean;\n\n    protocol: Protocol[];\n    ptcSelected: string;\n\n    reflectorMgmtForm: FormGroup;\n    formReflectorIp: FormControl;\n\n    searchReflectorIp: string = '';\n    searchProtocol: string;\n\n    listIsExist = false;\n    isSearch = false;\n\n    allDeleteCheck = false;\n\n    messageCount = 0;\n    constructor(\n        private dialog: MatDialog,\n        private reflectorService: ReflectorService,\n        private messageService: MessageService,\n        private spinner: NgxSpinnerService,\n        private errorService: ErrorService\n    ) {\n        let test: number;\n        let result: number;\n        this.getGlobalMessage();\n        this.protocol = [\n        \t{ id: 0, type: \"All\" },\n            { id: 1, type: \"Full TWAMP\" },\n            { id: 2, type: \"Light TWAMP\" }\n        ]\n        this.ptcSelected = '0';\n        this.validation();\n        this.pageMove(0);\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnDestroy() {\n        this.alive = false;\n    }\n\n    getGlobalMessage(): void {\n        const that = this;\n        this.subscription = this.messageService\n            .getMessage().takeWhile(() => this.alive)\n            .subscribe(message => {\n                alert(message);\n            });\n    }\n\n    pageMove(page: number): void {\n        this.spinner.show();\n        if (this.isSearch) {\n            this.getSearchList(page);\n        } else {\n            const that = this;\n            this.reflectorService.getReflectorListPageable(page, that.size, that.sort).takeWhile(() => this.alive).subscribe(\n                result => {\n                    that.isSearch = false;\n                    that.listIsExist = true;\n                    that.setPagingInfo(result, page);\n                },\n                error => {\n                    console.log(error);\n                    that.listIsExist = false;\n                    that.errorService.showAllListHttpError(error);\n                    that.spinner.hide();\n                }\n            );\n        }\n    }\n\n    public onSearchClick(): void {\n        const that = this;\n        this.messageCount = 0;\n        this.protocol.forEach(function (element) {\n            if (element.id == parseInt(that.ptcSelected)) {\n                that.searchProtocol = element.type;\n            }\n        })\n        this.getSearchList(0);\n    }\n\n    private onAllListClick(): void {\n        this.isSearch = false;\n        this.pageMove(0);\n    }\n\n    private clickOnAllListDelete(e: Event): void {\n        for (let a = 0; a < this.ReflectorData.length; a++) {\n            this.ReflectorData[a].deleteCheck = (e.currentTarget['checked'] == true ? true : false);\n        }\n    }\n\n    private clickOnOneListDelete(ischecked: boolean): void {\n        this.allDeleteCheck = (ischecked === false ? false : this.allDeleteCheck);\n    }\n    private getSearchList(page: number): void {\n        this.spinner.show();\n        const that = this;\n        this.reflectorService.getReflectorListPageableSearch(page, this.size, this.sort, this.searchReflectorIp, this.searchProtocol).takeWhile(() => this.alive).subscribe(\n            result => {\n                that.isSearch = true;\n                that.listIsExist = true;\n                that.setPagingInfo(result, page);\n            },\n            error => {\n                that.isSearch = true;\n                that.listIsExist = false;\n                that.spinner.hide();\n                // that.errorService.showSearchListHttpError(error);\n            }\n        )\n    }\n\n    private setPagingInfo(result: Object, page: number) {\n        const responseData: Object = result;\n        console.log(responseData['message']);\n        this.ReflectorData = responseData['result']['content'];\n        this.count = responseData['result']['totalElements'];\n        this.allpage = Math.ceil(this.count / this.size);\n        this.pg = page + 1;\n        this.startpage = (Math.floor((this.pg - 1) / this.block) * this.block) + 1;\n        this.endpage = (Math.floor((this.pg - 1) / this.block) * this.block) + this.block;\n        this.paginationIndex = Array.from(Array(this.endpage - this.startpage + 1), (x, i) => i + this.startpage);\n        this.spinner.hide();\n    }\n\n    private openReflectorAddDialog(): void {\n        const dialogRef = this.dialog.open(ReflectorAddDialog, {\n            height: '400px',\n            width: '600px'\n        });\n\n        dialogRef.componentInstance.protocolValidation = this.ProtocolValidation;\n        dialogRef.componentInstance.setStrProtocol = this.setStrProtocol;\n\n        dialogRef.beforeClose().subscribe(result => {\n            console.log('The dialog was closed');\n            (result === this.RESULT_OK) ? (this.pg == null) ? this.pageMove(0) : this.pageMove(this.pg - 1) : null;\n        });\n    }\n\n    private openReflectorModifyDialog(reflector: Reflector): void {\n        const dialogRef = this.dialog.open(ReflectorModifyDialog, {\n            height: '400px',\n            width: '600px',\n            data: reflector\n        });\n\n        dialogRef.componentInstance.protocolValidation = this.ProtocolValidation;\n        dialogRef.componentInstance.setStrProtocol = this.setStrProtocol;\n\n        dialogRef.beforeClose().subscribe(result => {\n            console.log('The dialog was cloased');\n            (result === this.RESULT_OK) ? this.pageMove(this.pg - 1) : null;\n        });\n    }\n\n    private onDeleteClick(): void {\n        this.spinner.show();\n        const that = this;\n        let count = 0;\n        let idx = new Array();\n        const tmpReflData = this.ReflectorData;\n        for (let a = 0; a < tmpReflData.length; a++) {\n            if (tmpReflData[a].deleteCheck === true) {\n                count++;\n                idx.push(a);\n            }\n        }\n        if (count === 0) {\n            alert('선택한 항목이 없습니다.');\n            return;\n        }\n        for (let a = 0; a < count; a++) {\n            const arrValue = idx.pop();\n            tmpReflData[arrValue].deleteCheck = undefined;\n            this.reflectorService.ReflectorDelete(tmpReflData[arrValue]).takeWhile(() => this.alive).subscribe(\n                responseData => {\n                    if (responseData['type'] === 1) {\n                        if (a + 1 === count) {\n                            alert(responseData['message']);\n                            if (that.allpage === that.pg && tmpReflData.length - count === 0) {\n                                that.pageMove(that.pg - 2);\n                            } else {\n                                that.pageMove(that.pg - 1);\n                            }\n                        }\n                    } else {\n                        alert('Reflector 삭제 실패 = ' + responseData['message']);\n                        this.spinner.hide();\n                    }\n                }\n            );\n        }\n    }\n\n    private validation(): void {\n        this.formReflectorIp = new FormControl('', Validators.compose([\n            Validators.pattern('^$|^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n        ]));\n        this.reflectorMgmtForm = new FormGroup({\n            reflectorIp: this.formReflectorIp\n        });\n    }\n\n    private ProtocolValidation(this: this): number {\n        return (this.fullTWAMP === false && this.lightTWAMP === false) ? this.RESULT_FAIL : this.RESULT_OK;\n    }\n\n    private setStrProtocol(): string {\n        if (this.fullTWAMP === true && this.lightTWAMP === true) {\n            return 'Full TWAMP';\n        } else if (this.fullTWAMP === true) {\n            return 'Full TWAMP';\n        } else if (this.lightTWAMP === true) {\n            return 'Light TWAMP';\n        } else {\n            return null;\n        }\n    }\n}\n\n@Component({\n    templateUrl: 'reflector-add.dialog.html'\n})\nexport class ReflectorAddDialog implements OnDestroy {\n\n    reflector: Reflector = new Reflector(0, '', new Protocol(0, ''), 862);\n\n    fullTWAMP = true;\n    lightTWAMP = false;\n\n    RESULT_OK = 1;\n    RESULT_FAIL = 0;\n    reflectorForm: FormGroup;\n    formReflectorIp: FormControl;\n    formPort: FormControl;\n    formAddress: FormControl;\n\n    protocolValidation: Function;\n    setStrProtocol: Function;\n\n    private alive = true;\n\n    constructor(\n        private dialogRef: MatDialogRef<ReflectorAddDialog>,\n        @Inject(MAT_DIALOG_DATA) private data: any,\n        private reflectorService: ReflectorService,\n        private geocodeService: GeocodeService\n    ) {\n        this.validation();\n    }\n\n    ngOnDestroy() {\n        this.alive = false;\n    }\n\n    public onNoClick(): void {\n        this.dialogRef.close(null);\n    }\n\n    public onAddclick(): void {\n        if (this.protocolValidation(this) === this.RESULT_FAIL) {\n            alert('하나 이상의 프로토콜을 선택하세요.');\n            return;\n        }\n        const that = this;\n        this.reflector.protocol.type = this.setStrProtocol();\n        if (this.fullTWAMP == false && this.lightTWAMP == true) {\n            this.reflector.port = 862;\n        }\n        this.geocodeService.geocodeAddress(this.reflector.address)\n                .subscribe(\n                    location => {\n                        const that2 = that;\n                        if (location.lat === 0 && location.lng === 0) {\n                            alert('주소를 다시 입력해여 주세요.');\n                            return;\n                        }\n                        that.reflector.lat = location.lat;\n                        that.reflector.lng = location.lng;\n                        that.reflectorService.ReflectorRegister(that.reflector)\n                                .takeWhile(() => that.alive)\n                                .subscribe(\n                                    ResponseData => {\n                                        if (ResponseData['type'] === 1) {\n                                            alert(ResponseData['message']);\n                                            that2.dialogRef.close(that2.RESULT_OK);\n                                        } else {\n                                            alert('Reflector 등록 실패 = ' + ResponseData['message']);\n                                        }\n                                    }\n                        );\n\n                    }\n                )\n    }\n\n    public reflectorIpValidation() {\n        const regex = new RegExp('^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$');\n        return regex.test(this.reflector.reflectorIp);\n    }\n\n    private validation(): void {\n        this.formReflectorIp = new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.pattern('^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n        ]));\n        this.formPort = new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.min(1),\n            Validators.max(65535)\n        ]));\n\n        this.formAddress = new FormControl('', Validators.compose([\n            Validators.required\n        ]));\n\n        this.reflectorForm = new FormGroup({\n            reflectorIp: this.formReflectorIp,\n            address: this.formAddress,\n            port: this.formPort\n        });\n    }\n}\n\n@Component({\n    templateUrl: 'reflector-modify.dialog.html'\n})\nexport class ReflectorModifyDialog implements OnInit, OnDestroy {\n\n    private alive = true;\n    reflector: Reflector = new Reflector(0, '', new Protocol());\n\n    reflectorId: number;\n    reflectorIp: string;\n    port: number;\n    protocol: string;\n    beforeModiAddress: string;\n    afterModiAddress: string;\n\n    fullTWAMP = false;\n    lightTWAMP = false;\n\n    RESULT_OK = 1;\n    RESULT_FAIL = 0;\n\n    reflectorForm: FormGroup;\n    formReflectorIp: FormControl;\n    formPort: FormControl;\n    formDisabledPort: FormControl;\n    formAddress: FormControl;\n\n    protocolValidation: Function;\n    setStrProtocol: Function;\n\n    constructor(\n        private dialogRef: MatDialogRef<ReflectorAddDialog>,\n        @Inject(MAT_DIALOG_DATA) private data: any,\n        private reflectorService: ReflectorService,\n        private geocodeService: GeocodeService\n    ) {\n        this.initData();\n        this.validation();\n    }\n\n    initData() {\n        this.reflectorId = this.data.reflectorId;\n        this.reflectorIp = this.data.reflectorIp;\n        this.port = this.data.port;\n        this.protocol = this.data.protocol.type;\n        this.beforeModiAddress = this.data.address;\n        this.afterModiAddress = this.data.address;\n        this.reflector.address = this.data.address;\n        this.reflector.lat = this.data.lat;\n        this.reflector.lng = this.data.lng;\n    }\n\n    public onNoClick(): void {\n        console.log(this.reflector);\n        this.dialogRef.close(null);\n    }\n\n    public onModifyclick(): void {\n        if (this.protocolValidation(this) === this.RESULT_FAIL) {\n            alert('하나 이상의 프로토콜을 선택하세요.');\n            return;\n        }\n        const that = this;\n        this.reflector.reflectorId = this.reflectorId;\n        this.reflector.reflectorIp = this.reflectorIp;\n        this.reflector.port = this.port;\n        this.reflector.protocol.type = this.setStrProtocol();\n        if (this.afterModiAddress !== this.beforeModiAddress) {\n            this.geocodeService.geocodeAddress(this.afterModiAddress)\n                .subscribe(\n                    location => {\n                        that.reflector.lat = location.lat;\n                        that.reflector.lng = location.lng;\n                        that.reflector.address = that.afterModiAddress;\n                        that.requestReflectorUpdate();\n                    }\n                )\n        } else {\n            this.requestReflectorUpdate();\n        }\n    }\n\n    private requestReflectorUpdate() {\n        const that = this;\n        this.reflectorService.ReflectorUpdate(this.reflector).takeWhile(() => this.alive).subscribe(\n            ResponseData => {\n                if (ResponseData['type'] === 1) {\n                    alert(ResponseData['message']);\n                    that.dialogRef.close(that.RESULT_OK);\n                } else {\n                    alert('Reflector 수정 실패 = ' + ResponseData['message']);\n                }\n            }\n        );\n    }\n    ngOnInit() {\n        this.ProtocolSplit();\n    }\n\n    ngOnDestroy() {\n        this.alive = false;\n    }\n\n    private ProtocolSplit(): void {\n        (this.protocol.indexOf('Full TWAMP') !== -1) ? this.fullTWAMP = true : null;\n        (this.protocol.indexOf('Light TWAMP') !== -1) ? this.lightTWAMP = true : null;\n    }\n\n\n    public reflectorIpValidation() {\n        const regex = new RegExp('^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$');\n        return regex.test(this.reflectorIp);\n    }\n\n    private validation(): void {\n        this.formReflectorIp = new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.pattern('^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n        ]));\n        this.formPort = new FormControl('', Validators.compose([\n            Validators.required,\n            Validators.min(1),\n            Validators.max(65535)\n        ]));\n        this.formAddress = new FormControl('', Validators.compose([\n            Validators.required\n        ]));\n        this.reflectorForm = new FormGroup({\n            reflectorIp: this.formReflectorIp,\n            address: this.formAddress,\n            port: this.formPort\n        });\n    }\n\n}\n","module.exports = \"<!-- title -->\\n<div class=\\\"title_area\\\">\\n  <div class=\\\"title\\\">Reflector 수정</div>\\n</div>\\n<!-- end title -->\\n\\n<!-- search-->\\n<div class=\\\"search_view p_20\\\">\\n  <form name=\\\"form1\\\" method=\\\"post\\\" action=\\\"\\\" novalidate [formGroup]=\\\"reflectorForm\\\" (ngSubmit)=\\\"onModifyclick()\\\">\\n    <table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"6\\\" class=\\\"search_list\\\">\\n      <tr>\\n        <th width=\\\"100\\\" height=\\\"40\\\"> Reflector IP</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"reflectorIp\\\" formControlName=\\\"reflectorIp\\\" required>\\n        </td>\\n      </tr>\\n      <tr>\\n        <th height=\\\"40\\\">Protocol</th>\\n        <td>\\n          <span class=\\\"p_r25\\\">\\n            <input name=\\\"checkbox\\\" type=\\\"checkbox\\\" [checked]=\\\"fullTWAMP\\\" (change)=\\\"fullTWAMP = $event.target.checked\\\"> Full TWAMP </span>\\n          <span class=\\\"p_r25\\\">\\n            <input name=\\\"checkbox\\\" type=\\\"checkbox\\\" [checked]=\\\"lightTWAMP\\\" (change)=\\\"lightTWAMP = $event.target.checked\\\"> Light TWAMP </span>\\n        </td>\\n      </tr>\\n      <tr>\\n        <th height=\\\"40\\\">Reflector Port</th>\\n        <!-- <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"port\\\" formControlName=\\\"port\\\" required>\\n        </td> -->\\n        <td *ngIf=\\\"fullTWAMP == false && lightTWAMP == true; else modifyport\\\">\\n            <input type=\\\"text\\\" name=\\\"textfield\\\" style=\\\"background: #dadada\\\" disabled>\\n          </td>\\n          <ng-template #modifyport>\\n              <td>\\n                  <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"port\\\" formControlName=\\\"port\\\" required>\\n                </td>\\n          </ng-template>\\n      </tr>\\n      <tr>\\n        <th width=\\\"100\\\" height=\\\"40\\\"> Address</th>\\n        <td>\\n          <input type=\\\"text\\\" name=\\\"textfield\\\" [(ngModel)]=\\\"afterModiAddress\\\" formControlName=\\\"address\\\" required>\\n        </td>\\n      </tr>\\n    </table>\\n    <div class=\\\"btn_dialog\\\">\\n      <button *ngIf=\\\"!(fullTWAMP == false && lightTWAMP == true)\\\" type=\\\"submit\\\" mat-raised-button class=\\\"btn\\\" [ngClass]=\\\"{'btn-basics' : reflectorForm.valid, 'disabled' : !reflectorForm.valid}\\\" [disabled]=\\\"!reflectorForm.valid\\\">수정</button>\\n      <button *ngIf=\\\"fullTWAMP == false && lightTWAMP == true\\\" type=\\\"submit\\\" mat-raised-button class=\\\"btn\\\" [ngClass]=\\\"{'btn-basics' : reflectorIpValidation(), 'disabled' : !reflectorIpValidation()}\\\" [disabled]=\\\"!reflectorIpValidation()\\\">수정</button>\\n      <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"onNoClick()\\\">취소</button>\\n    </div>\\n  </form>\\n</div>\\n<!-- end search -->\"","module.exports = \"<!-- header -->\\n<div id=\\\"header\\\" *ngIf=\\\"isLogin\\\">\\n  <div class=\\\"header_area\\\">\\n    <h1 class=\\\"Logo\\\">\\n      <a href=\\\"#\\\">\\n        <img src=\\\"logo.png\\\" alt=\\\"LGU+\\\" border=\\\"0\\\">\\n      </a>\\n    </h1>\\n\\n    <!-- menu -->\\n    <div id=\\\"mNaviG\\\">\\n      <ul>\\n        <li>\\n          <a [routerLink]=\\\"['/dashboard']\\\" [ngClass]=\\\"{'rollover': this.menuName == 'dashboard' || this.menuName == ''}\\\">대시보드</a>\\n        </li>\\n        <li>\\n          <a [routerLink]=\\\"['/qualityMeasurement']\\\" [ngClass]=\\\"{'rollover': this.menuName == 'qualityMeasurement'}\\\">품질 측정</a>\\n        </li>\\n        <li>\\n          <a [routerLink]=\\\"['/qualityHistory']\\\" [ngClass]=\\\"{'rollover': this.menuName == 'qualityHistory'}\\\">품질 이력</a>\\n        </li>\\n        <li>\\n          <a [routerLink]=\\\"['/analysisBigdata']\\\" [ngClass]=\\\"{'rollover': this.menuName == 'analysisBigdata'}\\\">빅데이터 분석</a>\\n        </li>\\n        <li>\\n          <a [routerLink]=\\\"['/obstacle']\\\" [ngClass]=\\\"{'rollover': this.menuName == 'obstacle'}\\\">장애 이력</a>\\n        </li>\\n        <li>\\n          <a [routerLink]=\\\"['/reflectorMgmt']\\\" [ngClass]=\\\"{'rollover': this.menuName == 'reflectorMgmt'}\\\">Reflector 관리</a>\\n        </li>\\n        <li>\\n          <a [routerLink]=\\\"['/config']\\\" [ngClass]=\\\"{'rollover': this.menuName == 'config'}\\\">설정</a>\\n        </li>\\n      </ul>\\n    </div>\\n    <!-- END menu-->\\n\\n    \\n  </div>\\n</div>\\n<!-- END header-->\\n<div id=\\\"container\\\">\\n  <!-- cont -->\\n  <div id=\\\"cont\\\">\\n    \\n    <!-- sub_area -->\\n    <div id=\\\"sub_area\\\">\\n      <div class=\\\"header_right\\\" *ngIf=\\\"isLogin\\\">\\n        <span *ngIf=\\\"this.fullmeshisRunning\\\" class=\\\"htex_on\\\" style=\\\"margin-right: 18px\\\">Fullmesh 동작중({{successCount}}/{{allCount}})</span>\\n        <span *ngIf=\\\"!this.fullmeshisRunning\\\" class=\\\"htex_off\\\" style=\\\"margin-right: 18px\\\">Fullmesh 동작정지</span>\\n        <span class=\\\"htex_name\\\">사용자님</span>\\n        <a href=\\\"\\\" class=\\\"btn_logout\\\" (click)=\\\"logout()\\\">Logout</a>\\n      </div>\\n      <router-outlet (activate)=\\\"selectMenu()\\\"></router-outlet>\\n    </div>\\n  </div>\\n</div>\\n\\n<span *ngIf=\\\"this.router.url != '/login'\\\">\\n  <!--footer-->\\n  <div id=\\\"footer\\\">\\n    <div id=\\\"fGroup\\\">\\n      <p class=\\\"f_left\\\">\\n        <span class=\\\"f_left_l\\\">네트워크 품질관리 플랫폼</span>\\n      </p>\\n      <p class=\\\"f_right\\\">Copyright(c) YMTECH Corporation. All rights reserved. </p>\\n    </div>\\n  </div>\\n  <!--END footer-->\\n</span>\\n\"","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AppConfig } from './_services/config/AppConfig';\nimport * as Stomp from 'stompjs';\nimport * as SockJS from 'sockjs-client';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n\n  public menuName: string;\n  public isLogin: boolean;\n\n  private serverUrl = AppConfig.settings.apiServer.url + '/socket';\n  private stompClient;\n\n  public fullmeshisRunning: boolean;\n  public allCount: number;\n  public successCount: number;\n\n\n\n  constructor(\n    public router: Router\n  ) {\n    this.isLogin = false;\n    this.init();\n    this.initializeWebSocketConnection();\n  }\n\n  private init(): void {\n    this.fullmeshisRunning = false;\n    this.allCount = 0;\n    this.successCount = 0;\n  }\n\n  /**\n   * Fullmesh가 동작중인지 아닌지에 대한 Web Socket Msg 처리 부분 - 1\n   * @param that \n   */\n  private initializeWebSocketConnection(): void {\n    let ws = new SockJS(this.serverUrl);\n    this.stompClient = Stomp.over(ws);\n    let that = this;\n    this.stompClient.connect({}, function (frame) {\n      that.getFullmeshSchedulingMsg(that);\n    });\n  }\n\n  /**\n   * Fullmesh가 동작중인지 아닌지에 대한 Web Socket Msg 처리 부분 - 2\n   * @param that \n   */\n  private getFullmeshSchedulingMsg(that: this): void {\n    that.stompClient.subscribe('/fullmesh/running', (message) => {\n      if (message.body) {\n        const obj = JSON.parse(message.body);\n        that.allCount = obj.reflectorTotalNum;\n        that.successCount = obj.reflectorCompleteNum;\n        that.fullmeshisRunning = true;\n      }\n    });\n    that.stompClient.subscribe('/fullmesh/stop', (message) => {\n      if (message.body) {\n        that.fullmeshisRunning = false;\n      }\n    });\n  }\n\n  public selectMenu(): void {\n    const url: string = this.router.url;\n    this.menuName = url.split('/')[1];\n\n    if (localStorage.getItem('currentUser')) {\n      this.isLogin = true;\n    } else if (!localStorage.getItem('currentUser') && url !== '/login') {\n      this.logout();\n    } else {\n      this.isLogin = false;\n    }\n  }\n\n  private logout(): void {\n    localStorage.removeItem('currentUser');\n    this.router.navigate(['/login']);\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, ErrorHandler, APP_INITIALIZER } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { routing } from './app.routing';\nimport { HttpModule } from '@angular/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport { COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatProgressBarModule, MatCheckboxModule, MatRadioModule } from '@angular/material';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AuthGuard } from './_guards/auth.guard';\n\nimport { AuthenticationService } from './_services/auth/auth.service';\n\nimport { ReflectorService } from './_services/reflector/reflector.service';\nimport { QualityHistoryService } from './_services/qualityHistory/quality-history.service';\nimport { CurrentStatusService } from './_services/currentStatus/current-status.service';\nimport { ConfigService } from './_services/config/config.service';\nimport { AnalysisBigdataService } from './_services/AnalysisBigdata/analysis-bigdata.service';\nimport { ErrorsHandler } from './_services/error/error.handler';\nimport { ErrorService } from './_services/error/error.service';\nimport { MessageService } from './_services/Message/message.service';\nimport 'rxjs/add/operator/takeWhile';\n\nimport { AppConfig } from './_services/config/AppConfig';\nexport function initializeApp(appConfig: AppConfig) {\n  return () => appConfig.load();\n}\n\nimport { AgmCoreModule } from '@agm/core';\n\nimport { NgxSpinnerModule } from 'ngx-spinner';\n\nimport { OwlDateTimeModule, OwlNativeDateTimeModule } from 'ng-pick-datetime';\n\nimport {\n  LoginComponent,\n  \n  DashboardComponent,\n  \n  QualityMeasurementComponent,\n  QualityHistoryComponent,\n  QualityGraphDialog,\n\n  AnalysisBigdataComponent,\n  AnalysisBigdataDialog,\n\n  ObstacleHistoryComponent,\n  \n  ReflectorMgmtComponent,\n  ReflectorAddDialog,\n  ReflectorModifyDialog,\n  \n  ConfigComponent,\n\n  ErrorComponent\n} from './_views';\nimport { GeocodeService } from './_services/geocode/geocode.service';\nimport { LesionHistoryService } from './_services/lesionHistory/lesion-history.service';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n\n    LoginComponent,\n    DashboardComponent,\n  \n    QualityMeasurementComponent,\n    QualityHistoryComponent,\n    QualityGraphDialog,\n\n    AnalysisBigdataComponent,\n    AnalysisBigdataDialog,\n\n    ObstacleHistoryComponent,\n\n    ReflectorMgmtComponent,\n    ReflectorAddDialog,\n    ReflectorModifyDialog,\n    \n    ConfigComponent,\n\n    ErrorComponent\n  ],\n  imports: [\n    BrowserModule,\n    MatDialogModule,\n    MatProgressBarModule,\n    BrowserAnimationsModule,\n    MatCheckboxModule,\n    MatRadioModule,\n    HttpModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgxSpinnerModule,\n    OwlDateTimeModule,\n    OwlNativeDateTimeModule,\n    AgmCoreModule.forRoot({\n      apiKey: 'AIzaSyC01VgsnnjkT1eVx4e-F1J5S9rrOYlrRPo'\n    }),\n    routing\n  ],\n  entryComponents: [\n    ReflectorAddDialog,\n    ReflectorModifyDialog,\n    QualityGraphDialog\n  ],\n  providers: [\n    AppConfig,\n    AuthGuard,\n    AuthenticationService,\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initializeApp,\n      deps: [AppConfig], multi: true\n    },\n    ReflectorService,\n    QualityHistoryService,\n    LesionHistoryService,\n    AnalysisBigdataService,\n    CurrentStatusService,\n    ConfigService,\n    {\n      provide: ErrorHandler,\n      useClass: ErrorsHandler,\n    },\n    {\n      provide: COMPOSITION_BUFFER_MODE,\n      useValue: false\n    },\n    MessageService,\n    ErrorService,\n    GeocodeService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Routes, RouterModule } from '@angular/router';\n\nimport { AuthGuard } from './_guards/auth.guard';\n\nimport { \n    LoginComponent,\n    \n    DashboardComponent,\n    \n    QualityMeasurementComponent,\n    QualityHistoryComponent,\n    \n    AnalysisBigdataComponent,\n    \n    ObstacleHistoryComponent,\n    \n    ReflectorMgmtComponent,\n    \n    ConfigComponent\n} from './_views';\n\nconst appRoutes: Routes = [\n    { path: '', component: DashboardComponent, canActivate: [AuthGuard] },\n    { path: 'login', component: LoginComponent },\n    { path: 'dashboard', component: DashboardComponent },\n    { path: 'qualityMeasurement', component: QualityMeasurementComponent },\n    { path: 'qualityHistory', component: QualityHistoryComponent },\n    { path: 'analysisBigdata', component: AnalysisBigdataComponent },\n    { path: 'obstacle', component: ObstacleHistoryComponent },\n    { path: 'reflectorMgmt', component: ReflectorMgmtComponent },\n    { path: 'config', component: ConfigComponent },\n\n    { path: '**', redirectTo: '' }\n];\n\nexport const routing = RouterModule.forRoot(appRoutes, {\n    useHash: true\n  });\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n    production: false,\n    name: 'dev'\n  };\n  ","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}